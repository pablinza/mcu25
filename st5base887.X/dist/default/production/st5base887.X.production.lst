

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sun Jul 27 23:09:56 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=3
    18                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    21                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,space=0,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38     0000                     
    39                           ; Generated 12/10/2023 GMT
    40                           ; 
    41                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F887 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73     0004                     fsr             equ	4
    74     0004                     fsr0            equ	4
    75     0000                     indf            equ	0
    76     0000                     indf0           equ	0
    77     0002                     pc              equ	2
    78     0002                     pcl             equ	2
    79     000A                     pclath          equ	10
    80     0003                     status          equ	3
    81     0000                     INDF            equ	0	;# 
    82     0001                     TMR0            equ	1	;# 
    83     0002                     PCL             equ	2	;# 
    84     0003                     STATUS          equ	3	;# 
    85     0004                     FSR             equ	4	;# 
    86     0005                     PORTA           equ	5	;# 
    87     0006                     PORTB           equ	6	;# 
    88     0007                     PORTC           equ	7	;# 
    89     0008                     PORTD           equ	8	;# 
    90     0009                     PORTE           equ	9	;# 
    91     000A                     PCLATH          equ	10	;# 
    92     000B                     INTCON          equ	11	;# 
    93     000C                     PIR1            equ	12	;# 
    94     000D                     PIR2            equ	13	;# 
    95     000E                     TMR1            equ	14	;# 
    96     000E                     TMR1L           equ	14	;# 
    97     000F                     TMR1H           equ	15	;# 
    98     0010                     T1CON           equ	16	;# 
    99     0011                     TMR2            equ	17	;# 
   100     0012                     T2CON           equ	18	;# 
   101     0013                     SSPBUF          equ	19	;# 
   102     0014                     SSPCON          equ	20	;# 
   103     0015                     CCPR1           equ	21	;# 
   104     0015                     CCPR1L          equ	21	;# 
   105     0016                     CCPR1H          equ	22	;# 
   106     0017                     CCP1CON         equ	23	;# 
   107     0018                     RCSTA           equ	24	;# 
   108     0019                     TXREG           equ	25	;# 
   109     001A                     RCREG           equ	26	;# 
   110     001B                     CCPR2           equ	27	;# 
   111     001B                     CCPR2L          equ	27	;# 
   112     001C                     CCPR2H          equ	28	;# 
   113     001D                     CCP2CON         equ	29	;# 
   114     001E                     ADRESH          equ	30	;# 
   115     001F                     ADCON0          equ	31	;# 
   116     0081                     OPTION_REG      equ	129	;# 
   117     0085                     TRISA           equ	133	;# 
   118     0086                     TRISB           equ	134	;# 
   119     0087                     TRISC           equ	135	;# 
   120     0088                     TRISD           equ	136	;# 
   121     0089                     TRISE           equ	137	;# 
   122     008C                     PIE1            equ	140	;# 
   123     008D                     PIE2            equ	141	;# 
   124     008E                     PCON            equ	142	;# 
   125     008F                     OSCCON          equ	143	;# 
   126     0090                     OSCTUNE         equ	144	;# 
   127     0091                     SSPCON2         equ	145	;# 
   128     0092                     PR2             equ	146	;# 
   129     0093                     SSPADD          equ	147	;# 
   130     0093                     SSPMSK          equ	147	;# 
   131     0093                     MSK             equ	147	;# 
   132     0094                     SSPSTAT         equ	148	;# 
   133     0095                     WPUB            equ	149	;# 
   134     0096                     IOCB            equ	150	;# 
   135     0097                     VRCON           equ	151	;# 
   136     0098                     TXSTA           equ	152	;# 
   137     0099                     SPBRG           equ	153	;# 
   138     009A                     SPBRGH          equ	154	;# 
   139     009B                     PWM1CON         equ	155	;# 
   140     009C                     ECCPAS          equ	156	;# 
   141     009D                     PSTRCON         equ	157	;# 
   142     009E                     ADRESL          equ	158	;# 
   143     009F                     ADCON1          equ	159	;# 
   144     0105                     WDTCON          equ	261	;# 
   145     0107                     CM1CON0         equ	263	;# 
   146     0108                     CM2CON0         equ	264	;# 
   147     0109                     CM2CON1         equ	265	;# 
   148     010C                     EEDATA          equ	268	;# 
   149     010C                     EEDAT           equ	268	;# 
   150     010D                     EEADR           equ	269	;# 
   151     010E                     EEDATH          equ	270	;# 
   152     010F                     EEADRH          equ	271	;# 
   153     0185                     SRCON           equ	389	;# 
   154     0187                     BAUDCTL         equ	391	;# 
   155     0188                     ANSEL           equ	392	;# 
   156     0189                     ANSELH          equ	393	;# 
   157     018C                     EECON1          equ	396	;# 
   158     018D                     EECON2          equ	397	;# 
   159     0000                     INDF            equ	0	;# 
   160     0001                     TMR0            equ	1	;# 
   161     0002                     PCL             equ	2	;# 
   162     0003                     STATUS          equ	3	;# 
   163     0004                     FSR             equ	4	;# 
   164     0005                     PORTA           equ	5	;# 
   165     0006                     PORTB           equ	6	;# 
   166     0007                     PORTC           equ	7	;# 
   167     0008                     PORTD           equ	8	;# 
   168     0009                     PORTE           equ	9	;# 
   169     000A                     PCLATH          equ	10	;# 
   170     000B                     INTCON          equ	11	;# 
   171     000C                     PIR1            equ	12	;# 
   172     000D                     PIR2            equ	13	;# 
   173     000E                     TMR1            equ	14	;# 
   174     000E                     TMR1L           equ	14	;# 
   175     000F                     TMR1H           equ	15	;# 
   176     0010                     T1CON           equ	16	;# 
   177     0011                     TMR2            equ	17	;# 
   178     0012                     T2CON           equ	18	;# 
   179     0013                     SSPBUF          equ	19	;# 
   180     0014                     SSPCON          equ	20	;# 
   181     0015                     CCPR1           equ	21	;# 
   182     0015                     CCPR1L          equ	21	;# 
   183     0016                     CCPR1H          equ	22	;# 
   184     0017                     CCP1CON         equ	23	;# 
   185     0018                     RCSTA           equ	24	;# 
   186     0019                     TXREG           equ	25	;# 
   187     001A                     RCREG           equ	26	;# 
   188     001B                     CCPR2           equ	27	;# 
   189     001B                     CCPR2L          equ	27	;# 
   190     001C                     CCPR2H          equ	28	;# 
   191     001D                     CCP2CON         equ	29	;# 
   192     001E                     ADRESH          equ	30	;# 
   193     001F                     ADCON0          equ	31	;# 
   194     0081                     OPTION_REG      equ	129	;# 
   195     0085                     TRISA           equ	133	;# 
   196     0086                     TRISB           equ	134	;# 
   197     0087                     TRISC           equ	135	;# 
   198     0088                     TRISD           equ	136	;# 
   199     0089                     TRISE           equ	137	;# 
   200     008C                     PIE1            equ	140	;# 
   201     008D                     PIE2            equ	141	;# 
   202     008E                     PCON            equ	142	;# 
   203     008F                     OSCCON          equ	143	;# 
   204     0090                     OSCTUNE         equ	144	;# 
   205     0091                     SSPCON2         equ	145	;# 
   206     0092                     PR2             equ	146	;# 
   207     0093                     SSPADD          equ	147	;# 
   208     0093                     SSPMSK          equ	147	;# 
   209     0093                     MSK             equ	147	;# 
   210     0094                     SSPSTAT         equ	148	;# 
   211     0095                     WPUB            equ	149	;# 
   212     0096                     IOCB            equ	150	;# 
   213     0097                     VRCON           equ	151	;# 
   214     0098                     TXSTA           equ	152	;# 
   215     0099                     SPBRG           equ	153	;# 
   216     009A                     SPBRGH          equ	154	;# 
   217     009B                     PWM1CON         equ	155	;# 
   218     009C                     ECCPAS          equ	156	;# 
   219     009D                     PSTRCON         equ	157	;# 
   220     009E                     ADRESL          equ	158	;# 
   221     009F                     ADCON1          equ	159	;# 
   222     0105                     WDTCON          equ	261	;# 
   223     0107                     CM1CON0         equ	263	;# 
   224     0108                     CM2CON0         equ	264	;# 
   225     0109                     CM2CON1         equ	265	;# 
   226     010C                     EEDATA          equ	268	;# 
   227     010C                     EEDAT           equ	268	;# 
   228     010D                     EEADR           equ	269	;# 
   229     010E                     EEDATH          equ	270	;# 
   230     010F                     EEADRH          equ	271	;# 
   231     0185                     SRCON           equ	389	;# 
   232     0187                     BAUDCTL         equ	391	;# 
   233     0188                     ANSEL           equ	392	;# 
   234     0189                     ANSELH          equ	393	;# 
   235     018C                     EECON1          equ	396	;# 
   236     018D                     EECON2          equ	397	;# 
   237     0000                     INDF            equ	0	;# 
   238     0001                     TMR0            equ	1	;# 
   239     0002                     PCL             equ	2	;# 
   240     0003                     STATUS          equ	3	;# 
   241     0004                     FSR             equ	4	;# 
   242     0005                     PORTA           equ	5	;# 
   243     0006                     PORTB           equ	6	;# 
   244     0007                     PORTC           equ	7	;# 
   245     0008                     PORTD           equ	8	;# 
   246     0009                     PORTE           equ	9	;# 
   247     000A                     PCLATH          equ	10	;# 
   248     000B                     INTCON          equ	11	;# 
   249     000C                     PIR1            equ	12	;# 
   250     000D                     PIR2            equ	13	;# 
   251     000E                     TMR1            equ	14	;# 
   252     000E                     TMR1L           equ	14	;# 
   253     000F                     TMR1H           equ	15	;# 
   254     0010                     T1CON           equ	16	;# 
   255     0011                     TMR2            equ	17	;# 
   256     0012                     T2CON           equ	18	;# 
   257     0013                     SSPBUF          equ	19	;# 
   258     0014                     SSPCON          equ	20	;# 
   259     0015                     CCPR1           equ	21	;# 
   260     0015                     CCPR1L          equ	21	;# 
   261     0016                     CCPR1H          equ	22	;# 
   262     0017                     CCP1CON         equ	23	;# 
   263     0018                     RCSTA           equ	24	;# 
   264     0019                     TXREG           equ	25	;# 
   265     001A                     RCREG           equ	26	;# 
   266     001B                     CCPR2           equ	27	;# 
   267     001B                     CCPR2L          equ	27	;# 
   268     001C                     CCPR2H          equ	28	;# 
   269     001D                     CCP2CON         equ	29	;# 
   270     001E                     ADRESH          equ	30	;# 
   271     001F                     ADCON0          equ	31	;# 
   272     0081                     OPTION_REG      equ	129	;# 
   273     0085                     TRISA           equ	133	;# 
   274     0086                     TRISB           equ	134	;# 
   275     0087                     TRISC           equ	135	;# 
   276     0088                     TRISD           equ	136	;# 
   277     0089                     TRISE           equ	137	;# 
   278     008C                     PIE1            equ	140	;# 
   279     008D                     PIE2            equ	141	;# 
   280     008E                     PCON            equ	142	;# 
   281     008F                     OSCCON          equ	143	;# 
   282     0090                     OSCTUNE         equ	144	;# 
   283     0091                     SSPCON2         equ	145	;# 
   284     0092                     PR2             equ	146	;# 
   285     0093                     SSPADD          equ	147	;# 
   286     0093                     SSPMSK          equ	147	;# 
   287     0093                     MSK             equ	147	;# 
   288     0094                     SSPSTAT         equ	148	;# 
   289     0095                     WPUB            equ	149	;# 
   290     0096                     IOCB            equ	150	;# 
   291     0097                     VRCON           equ	151	;# 
   292     0098                     TXSTA           equ	152	;# 
   293     0099                     SPBRG           equ	153	;# 
   294     009A                     SPBRGH          equ	154	;# 
   295     009B                     PWM1CON         equ	155	;# 
   296     009C                     ECCPAS          equ	156	;# 
   297     009D                     PSTRCON         equ	157	;# 
   298     009E                     ADRESL          equ	158	;# 
   299     009F                     ADCON1          equ	159	;# 
   300     0105                     WDTCON          equ	261	;# 
   301     0107                     CM1CON0         equ	263	;# 
   302     0108                     CM2CON0         equ	264	;# 
   303     0109                     CM2CON1         equ	265	;# 
   304     010C                     EEDATA          equ	268	;# 
   305     010C                     EEDAT           equ	268	;# 
   306     010D                     EEADR           equ	269	;# 
   307     010E                     EEDATH          equ	270	;# 
   308     010F                     EEADRH          equ	271	;# 
   309     0185                     SRCON           equ	389	;# 
   310     0187                     BAUDCTL         equ	391	;# 
   311     0188                     ANSEL           equ	392	;# 
   312     0189                     ANSELH          equ	393	;# 
   313     018C                     EECON1          equ	396	;# 
   314     018D                     EECON2          equ	397	;# 
   315                           
   316                           	psect	idataBANK0
   317     0740                     __pidataBANK0:
   318                           
   319                           ;initializer for _adcset
   320     0740  3432               	retlw	50
   321     0007                     _PORTC          set	7
   322     0007                     _PORTCbits      set	7
   323     0019                     _TXREG          set	25
   324     000C                     _PIR1bits       set	12
   325     001E                     _ADRESH         set	30
   326     0009                     _PORTEbits      set	9
   327     001F                     _ADCON0bits     set	31
   328     0018                     _RCSTAbits      set	24
   329     0006                     _PORTBbits      set	6
   330     0001                     _TMR0           set	1
   331     000B                     _INTCONbits     set	11
   332     0087                     _TRISCbits      set	135
   333     0087                     _TRISC          set	135
   334     009E                     _ADRESL         set	158
   335     0081                     _OPTION_REGbits set	129
   336     0099                     _SPBRG          set	153
   337     0098                     _TXSTAbits      set	152
   338     0089                     _TRISEbits      set	137
   339     0086                     _TRISBbits      set	134
   340     008F                     _OSCCONbits     set	143
   341     040F                     _nRBPU          set	1039
   342     0188                     _ANSELbits      set	392
   343     0189                     _ANSELH         set	393
   344     0188                     _ANSEL          set	392
   345                           
   346                           	psect	strings
   347     0627                     __pstrings:
   348     0627                     stringtab:
   349     0627                     __stringtab:
   350     0627                     stringcode:	
   351                           ;	String table - string pointers are 1 byte each
   352                           
   353     0627                     stringdir:
   354     0627  3006               	movlw	high stringdir
   355     0628  008A               	movwf	10
   356     0629  0804               	movf	4,w
   357     062A  0A84               	incf	4,f
   358     062B  0782               	addwf	2,f
   359     062C                     __stringbase:
   360     062C  3400               	retlw	0
   361     062D                     __end_of__stringtab:
   362     062D                     STR_4:
   363     062D  3420               	retlw	32	;' '
   364     062E  3420               	retlw	32	;' '
   365     062F  3420               	retlw	32	;' '
   366     0630  3420               	retlw	32	;' '
   367     0631  3420               	retlw	32	;' '
   368     0632  3420               	retlw	32	;' '
   369     0633  3420               	retlw	32	;' '
   370     0634  3420               	retlw	32	;' '
   371     0635  3420               	retlw	32	;' '
   372     0636  3420               	retlw	32	;' '
   373     0637  3420               	retlw	32	;' '
   374     0638  3420               	retlw	32	;' '
   375     0639  3400               	retlw	0
   376     063A                     STR_3:
   377     063A  342A               	retlw	42	;'*'
   378     063B  342A               	retlw	42	;'*'
   379     063C  3420               	retlw	32	;' '
   380     063D  3441               	retlw	65	;'A'
   381     063E  344C               	retlw	76	;'L'
   382     063F  3445               	retlw	69	;'E'
   383     0640  3452               	retlw	82	;'R'
   384     0641  3454               	retlw	84	;'T'
   385     0642  3441               	retlw	65	;'A'
   386     0643  3420               	retlw	32	;' '
   387     0644  342A               	retlw	42	;'*'
   388     0645  342A               	retlw	42	;'*'
   389     0646  3400               	retlw	0
   390     0647                     STR_1:
   391     0647  3441               	retlw	65	;'A'
   392     0648  3444               	retlw	68	;'D'
   393     0649  3443               	retlw	67	;'C'
   394     064A  343A               	retlw	58	;':'
   395     064B  3425               	retlw	37	;'%'
   396     064C  3475               	retlw	117	;'u'
   397     064D  340A               	retlw	10
   398     064E  3400               	retlw	0
   399     064F                     STR_2:
   400     064F  3441               	retlw	65	;'A'
   401     0650  3444               	retlw	68	;'D'
   402     0651  3443               	retlw	67	;'C'
   403     0652  343A               	retlw	58	;':'
   404     0653  3400               	retlw	0
   405     0654                     STR_5:
   406     0654  3453               	retlw	83	;'S'
   407     0655  3445               	retlw	69	;'E'
   408     0656  3454               	retlw	84	;'T'
   409     0657  343A               	retlw	58	;':'
   410     0658  3400               	retlw	0
   411                           
   412                           	psect	cinit
   413     000F                     start_initialization:	
   414                           ; #config settings
   415                           
   416     000F                     __initialization:
   417                           
   418                           ; Initialize objects allocated to BANK0
   419     000F  120A  118A  2740  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   420     0014  00EF               	movwf	__pdataBANK0& (0+127)
   421                           
   422                           ; Clear objects allocated to BANK0
   423     0015  1383               	bcf	3,7	;select IRP bank0
   424     0016  3020               	movlw	low __pbssBANK0
   425     0017  0084               	movwf	4
   426     0018  3056               	movlw	low (__pbssBANK0+54)
   427     0019  120A  118A  2738  120A  118A  	fcall	clear_ram0
   428                           
   429                           ; Clear objects allocated to COMMON
   430     001E  01FB               	clrf	__pbssCOMMON& (0+127)
   431                           
   432                           ; Clear objects allocated to BITCOMMON
   433     001F  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   434     0020                     end_of_initialization:	
   435                           ;End of C runtime variable initialization code
   436                           
   437     0020                     __end_of__initialization:
   438     0020  0183               	clrf	3
   439     0021  120A  118A  2E87   	ljmp	_main	;jump to C main() function
   440                           
   441                           	psect	bitbssCOMMON
   442     03D0                     __pbitbssCOMMON:
   443     03D0                     _setmode:
   444     03D0                     	ds	1
   445     03D1                     _tickms:
   446     03D1                     	ds	1
   447                           
   448                           	psect	bssCOMMON
   449     007B                     __pbssCOMMON:
   450     007B                     task4@val:
   451     007B                     	ds	1
   452                           
   453                           	psect	bssBANK0
   454     0020                     __pbssBANK0:
   455     0020                     _dbuf:
   456     0020                     	ds	32
   457     0040                     LCDWriteNum@F1440:
   458     0040                     	ds	5
   459     0045                     _width:
   460     0045                     	ds	2
   461     0047                     _prec:
   462     0047                     	ds	2
   463     0049                     task4@cnt:
   464     0049                     	ds	2
   465     004B                     task2@cnt:
   466     004B                     	ds	2
   467     004D                     task1@cnt:
   468     004D                     	ds	2
   469     004F                     _flags:
   470     004F                     	ds	1
   471     0050                     task4@ckpin:
   472     0050                     	ds	1
   473     0051                     task4@state:
   474     0051                     	ds	1
   475     0052                     task3@adcset0:
   476     0052                     	ds	1
   477     0053                     task3@adcres0:
   478     0053                     	ds	1
   479     0054                     task2@state:
   480     0054                     	ds	1
   481     0055                     _adcres:
   482     0055                     	ds	1
   483                           
   484                           	psect	dataBANK0
   485     006F                     __pdataBANK0:
   486     006F                     _adcset:
   487     006F                     	ds	1
   488                           
   489                           	psect	clrtext
   490     0738                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494     0738  0064               	clrwdt	;clear the watchdog before getting into this loop
   495     0739                     clrloop0:
   496     0739  0180               	clrf	0	;clear RAM location pointed to by FSR
   497     073A  0A84               	incf	4,f	;increment pointer
   498     073B  0604               	xorwf	4,w	;XOR with final address
   499     073C  1903               	btfsc	3,2	;have we reached the end yet?
   500     073D  3400               	retlw	0	;all done for this memory range, return
   501     073E  0604               	xorwf	4,w	;XOR again to restore value
   502     073F  2F39               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackCOMMON
   505     0070                     __pcstackCOMMON:
   506     0070                     ?_setup:
   507     0070                     ?_LCDSetup:	
   508                           ; 1 bytes @ 0x0
   509                           
   510     0070                     ?_task1:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ?_task2:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?_task3:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ?_task4:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_LCDWriteCMD:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ?_isr:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_main:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ?_putch:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_LCDWriteChar:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ??_isr:	
   538                           ; 1 bytes @ 0x0
   539                           
   540                           
   541                           ; 1 bytes @ 0x0
   542     0070                     	ds	2
   543     0072                     ?_LCDGotoXY:
   544     0072                     ?___awdiv:	
   545                           ; 1 bytes @ 0x2
   546                           
   547     0072                     ?___lwdiv:	
   548                           ; 2 bytes @ 0x2
   549                           
   550     0072                     ?___lwmod:	
   551                           ; 2 bytes @ 0x2
   552                           
   553     0072                     putch@byte:	
   554                           ; 2 bytes @ 0x2
   555                           
   556     0072                     LCDGotoXY@row:	
   557                           ; 1 bytes @ 0x2
   558                           
   559     0072                     ___awdiv@divisor:	
   560                           ; 1 bytes @ 0x2
   561                           
   562     0072                     ___lwdiv@divisor:	
   563                           ; 2 bytes @ 0x2
   564                           
   565     0072                     ___lwmod@divisor:	
   566                           ; 2 bytes @ 0x2
   567                           
   568     0072                     ??_setup:	
   569                           ; 2 bytes @ 0x2
   570                           
   571     0072                     ??_task1:	
   572                           ; 1 bytes @ 0x2
   573                           
   574     0072                     ??_LCDWriteCMD:	
   575                           ; 1 bytes @ 0x2
   576                           
   577     0072                     ??_putch:	
   578                           ; 1 bytes @ 0x2
   579                           
   580     0072                     ??_LCDWriteChar:	
   581                           ; 1 bytes @ 0x2
   582                           
   583                           
   584                           ; 1 bytes @ 0x2
   585     0072                     	ds	1
   586     0073                     ?_fputc:
   587     0073                     LCDWriteChar@data:	
   588                           ; 2 bytes @ 0x3
   589                           
   590     0073                     fputc@c:	
   591                           ; 1 bytes @ 0x3
   592                           
   593     0073                     ??_LCDGotoXY:	
   594                           ; 2 bytes @ 0x3
   595                           
   596                           
   597                           ; 1 bytes @ 0x3
   598     0073                     	ds	1
   599     0074                     ?_LCDWriteMsgROM:
   600     0074                     LCDWriteCMD@cmd:	
   601                           ; 1 bytes @ 0x4
   602                           
   603     0074                     LCDGotoXY@col:	
   604                           ; 1 bytes @ 0x4
   605                           
   606     0074                     LCDWriteMsgROM@str:	
   607                           ; 1 bytes @ 0x4
   608                           
   609     0074                     ___awdiv@dividend:	
   610                           ; 1 bytes @ 0x4
   611                           
   612     0074                     ___lwdiv@dividend:	
   613                           ; 2 bytes @ 0x4
   614                           
   615     0074                     ___lwmod@dividend:	
   616                           ; 2 bytes @ 0x4
   617                           
   618                           
   619                           ; 2 bytes @ 0x4
   620     0074                     	ds	1
   621     0075                     LCDGotoXY@DDaddr:
   622     0075                     fputc@fp:	
   623                           ; 1 bytes @ 0x5
   624                           
   625     0075                     ??_LCDSetup:	
   626                           ; 1 bytes @ 0x5
   627                           
   628     0075                     ??_LCDWriteMsgROM:	
   629                           ; 1 bytes @ 0x5
   630                           
   631                           
   632                           ; 1 bytes @ 0x5
   633     0075                     	ds	1
   634     0076                     ___awdiv@counter:
   635     0076                     ___lwmod@counter:	
   636                           ; 1 bytes @ 0x6
   637                           
   638     0076                     ___lwdiv@quotient:	
   639                           ; 1 bytes @ 0x6
   640                           
   641     0076                     ??___awdiv:	
   642                           ; 2 bytes @ 0x6
   643                           
   644     0076                     ??___lwdiv:	
   645                           ; 1 bytes @ 0x6
   646                           
   647     0076                     ??___lwmod:	
   648                           ; 1 bytes @ 0x6
   649                           
   650                           
   651                           ; 1 bytes @ 0x6
   652     0076                     	ds	1
   653     0077                     LCDSetup@n:
   654     0077                     ___awdiv@sign:	
   655                           ; 1 bytes @ 0x7
   656                           
   657                           
   658                           ; 1 bytes @ 0x7
   659     0077                     	ds	1
   660     0078                     ___lwdiv@counter:
   661     0078                     ___awdiv@quotient:	
   662                           ; 1 bytes @ 0x8
   663                           
   664                           
   665                           ; 2 bytes @ 0x8
   666     0078                     	ds	1
   667     0079                     vfprintf@cfmt:
   668     0079                     ??_vfprintf:	
   669                           ; 1 bytes @ 0x9
   670                           
   671                           
   672                           ; 1 bytes @ 0x9
   673     0079                     	ds	1
   674     007A                     ??_printf:
   675     007A                     ??_main:	
   676                           ; 1 bytes @ 0xA
   677                           
   678                           
   679                           	psect	cstackBANK0
   680     0056                     __pcstackBANK0:	
   681                           ; 1 bytes @ 0xA
   682                           
   683     0056                     ?_LCDWriteNum:
   684     0056                     LCDWriteNum@num:	
   685                           ; 1 bytes @ 0x0
   686                           
   687     0056                     ??_task2:	
   688                           ; 2 bytes @ 0x0
   689                           
   690     0056                     ??_fputc:	
   691                           ; 1 bytes @ 0x0
   692                           
   693                           
   694                           ; 1 bytes @ 0x0
   695     0056                     	ds	2
   696     0058                     LCDWriteNum@padn:
   697     0058                     task2@res:	
   698                           ; 1 bytes @ 0x2
   699                           
   700                           
   701                           ; 2 bytes @ 0x2
   702     0058                     	ds	1
   703     0059                     ??_LCDWriteNum:
   704                           
   705                           ; 1 bytes @ 0x3
   706     0059                     	ds	2
   707     005B                     ?_vfpfcnvrt:
   708     005B                     vfpfcnvrt@fp:	
   709                           ; 1 bytes @ 0x5
   710                           
   711     005B                     LCDWriteNum@digs:	
   712                           ; 1 bytes @ 0x5
   713                           
   714                           
   715                           ; 5 bytes @ 0x5
   716     005B                     	ds	1
   717     005C                     vfpfcnvrt@fmt:
   718                           
   719                           ; 1 bytes @ 0x6
   720     005C                     	ds	1
   721     005D                     vfpfcnvrt@ap:
   722                           
   723                           ; 1 bytes @ 0x7
   724     005D                     	ds	1
   725     005E                     ??_vfpfcnvrt:
   726                           
   727                           ; 1 bytes @ 0x8
   728     005E                     	ds	2
   729     0060                     LCDWriteNum@res:
   730     0060                     vfpfcnvrt@convarg:	
   731                           ; 1 bytes @ 0xA
   732                           
   733                           
   734                           ; 4 bytes @ 0xA
   735     0060                     	ds	1
   736     0061                     LCDWriteNum@i:
   737                           
   738                           ; 1 bytes @ 0xB
   739     0061                     	ds	1
   740     0062                     ??_task4:
   741                           
   742                           ; 1 bytes @ 0xC
   743     0062                     	ds	2
   744     0064                     vfpfcnvrt@cp:
   745                           
   746                           ; 1 bytes @ 0xE
   747     0064                     	ds	1
   748     0065                     vfpfcnvrt@c:
   749                           
   750                           ; 1 bytes @ 0xF
   751     0065                     	ds	1
   752     0066                     ?_vfprintf:
   753     0066                     vfprintf@fp:	
   754                           ; 2 bytes @ 0x10
   755                           
   756                           
   757                           ; 1 bytes @ 0x10
   758     0066                     	ds	1
   759     0067                     vfprintf@fmt:
   760                           
   761                           ; 1 bytes @ 0x11
   762     0067                     	ds	1
   763     0068                     vfprintf@ap:
   764                           
   765                           ; 1 bytes @ 0x12
   766     0068                     	ds	1
   767     0069                     ?_printf:
   768     0069                     printf@fmt:	
   769                           ; 2 bytes @ 0x13
   770                           
   771                           
   772                           ; 1 bytes @ 0x13
   773     0069                     	ds	3
   774     006C                     printf@ap:
   775                           
   776                           ; 1 bytes @ 0x16
   777     006C                     	ds	1
   778     006D                     ??_task3:
   779                           
   780                           ; 1 bytes @ 0x17
   781     006D                     	ds	2
   782                           
   783                           	psect	maintext
   784     0687                     __pmaintext:	
   785 ;;
   786 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   787 ;;
   788 ;; *************** function _main *****************
   789 ;; Defined at:
   790 ;;		line 29 in file "main.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : B00/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   804 ;;      Params:         0       0       0       0       0
   805 ;;      Locals:         0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0
   807 ;;      Totals:         0       0       0       0       0
   808 ;;Total ram usage:        0 bytes
   809 ;; Hardware stack levels required when called: 7
   810 ;; This function calls:
   811 ;;		_LCDSetup
   812 ;;		_setup
   813 ;;		_task1
   814 ;;		_task2
   815 ;;		_task3
   816 ;;		_task4
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822     0687                     _main:	
   823                           ;psect for function _main
   824                           
   825     0687                     l2172:	
   826                           ;incstack = 0
   827                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   828                           
   829                           
   830                           ;main.c: 31:     setup();
   831     0687  120A  118A  25F0  120A  118A  	fcall	_setup
   832                           
   833                           ;main.c: 32:     LCDSetup();
   834     068C  120A  118A  22C9  120A  118A  	fcall	_LCDSetup
   835     0691                     l2174:
   836                           
   837                           ;main.c: 34:     {;main.c: 35:         if(tickms)
   838     0691  1CFA               	btfss	_tickms/(0+8),_tickms& (0+7)	;volatile
   839     0692  2E94               	goto	u1981
   840     0693  2E95               	goto	u1980
   841     0694                     u1981:
   842     0694  2E91               	goto	l2174
   843     0695                     u1980:
   844     0695                     l2176:
   845                           
   846                           ;main.c: 36:         {;main.c: 37:             tickms = 0;
   847     0695  10FA               	bcf	_tickms/(0+8),_tickms& (0+7)	;volatile
   848     0696                     l2178:
   849                           
   850                           ;main.c: 38:             task1();
   851     0696  120A  118A  26D5  120A  118A  	fcall	_task1
   852     069B                     l2180:
   853                           
   854                           ;main.c: 39:             task2();
   855     069B  120A  118A  2499  120A  118A  	fcall	_task2
   856     06A0                     l2182:
   857                           
   858                           ;main.c: 40:             if(setmode == 0) task3();
   859     06A0  187A               	btfsc	_setmode/(0+8),_setmode& (0+7)	;volatile
   860     06A1  2EA3               	goto	u1991
   861     06A2  2EA4               	goto	u1990
   862     06A3                     u1991:
   863     06A3  2EA9               	goto	l83
   864     06A4                     u1990:
   865     06A4                     l2184:
   866     06A4  120A  118A  235D  120A  118A  	fcall	_task3
   867     06A9                     l83:
   868                           
   869                           ;main.c: 41:             task4();
   870     06A9  120A  118A  2135  120A  118A  	fcall	_task4
   871     06AE  2E91               	goto	l2174
   872     06AF  120A  118A  280C   	ljmp	start
   873     06B2                     __end_of_main:
   874                           
   875                           	psect	text1
   876     0135                     __ptext1:	
   877 ;; *************** function _task4 *****************
   878 ;; Defined at:
   879 ;;		line 146 in file "main.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0
   895 ;;      Temps:          0       2       0       0       0
   896 ;;      Totals:         0       2       0       0       0
   897 ;;Total ram usage:        2 bytes
   898 ;; Hardware stack levels used: 1
   899 ;; Hardware stack levels required when called: 3
   900 ;; This function calls:
   901 ;;		_LCDGotoXY
   902 ;;		_LCDWriteCMD
   903 ;;		_LCDWriteNum
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909     0135                     _task4:	
   910                           ;psect for function _task4
   911                           
   912     0135                     l2094:	
   913                           ;incstack = 0
   914                           ; Regs used in _task4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   915                           
   916                           
   917                           ;main.c: 148:     static uint8_t state = 0;;main.c: 149:     static uint16_t cnt = 0;;ma
      +                          in.c: 150:     static uint8_t ckpin, val;;main.c: 151:     switch(state)
   918     0135  29F8               	goto	l2170
   919     0136                     l132:	
   920                           ;main.c: 152:     {;main.c: 153:         case 0:
   921                           
   922                           
   923                           ;main.c: 154:             if(PORTBbits.RB2 == 0)
   924     0136  1906               	btfsc	6,2	;volatile
   925     0137  2939               	goto	u1841
   926     0138  293A               	goto	u1840
   927     0139                     u1841:
   928     0139  2950               	goto	l2102
   929     013A                     u1840:
   930     013A                     l2096:
   931                           
   932                           ;main.c: 155:             {;main.c: 156:                 cnt++;
   933     013A  3001               	movlw	1
   934     013B  07C9               	addwf	task4@cnt,f
   935     013C  1803               	skipnc
   936     013D  0ACA               	incf	task4@cnt+1,f
   937     013E  3000               	movlw	0
   938     013F  07CA               	addwf	task4@cnt+1,f
   939                           
   940                           ;main.c: 157:                 if(cnt > 999)
   941     0140  3003               	movlw	3
   942     0141  024A               	subwf	task4@cnt+1,w
   943     0142  30E8               	movlw	232
   944     0143  1903               	skipnz
   945     0144  0249               	subwf	task4@cnt,w
   946     0145  1C03               	skipc
   947     0146  2948               	goto	u1851
   948     0147  2949               	goto	u1850
   949     0148                     u1851:
   950     0148  2A08               	goto	l154
   951     0149                     u1850:
   952     0149                     l2098:
   953                           
   954                           ;main.c: 158:                 {;main.c: 159:                     cnt = 0;
   955     0149  01C9               	clrf	task4@cnt
   956     014A  01CA               	clrf	task4@cnt+1
   957     014B                     l2100:
   958                           
   959                           ;main.c: 160:                     state++;
   960     014B  3001               	movlw	1
   961     014C  1283               	bcf	3,5	;RP0=0, select bank0
   962     014D  1303               	bcf	3,6	;RP1=0, select bank0
   963     014E  07D1               	addwf	task4@state,f
   964     014F  2A08               	goto	l154
   965     0150                     l2102:
   966     0150  01C9               	clrf	task4@cnt
   967     0151  01CA               	clrf	task4@cnt+1
   968     0152  2A08               	goto	l154
   969     0153                     l137:	
   970                           ;main.c: 165:         case 1:
   971                           
   972                           
   973                           ;main.c: 166:             if(PORTBbits.RB2 == 1)
   974     0153  1D06               	btfss	6,2	;volatile
   975     0154  2956               	goto	u1861
   976     0155  2957               	goto	u1860
   977     0156                     u1861:
   978     0156  2950               	goto	l2102
   979     0157                     u1860:
   980     0157                     l2104:
   981                           
   982                           ;main.c: 167:             {;main.c: 168:                 cnt++;
   983     0157  3001               	movlw	1
   984     0158  07C9               	addwf	task4@cnt,f
   985     0159  1803               	skipnc
   986     015A  0ACA               	incf	task4@cnt+1,f
   987     015B  3000               	movlw	0
   988     015C  07CA               	addwf	task4@cnt+1,f
   989                           
   990                           ;main.c: 169:                 if(cnt > 99)
   991     015D  3000               	movlw	0
   992     015E  024A               	subwf	task4@cnt+1,w
   993     015F  3064               	movlw	100
   994     0160  1903               	skipnz
   995     0161  0249               	subwf	task4@cnt,w
   996     0162  1C03               	skipc
   997     0163  2965               	goto	u1871
   998     0164  2966               	goto	u1870
   999     0165                     u1871:
  1000     0165  2A08               	goto	l154
  1001     0166                     u1870:
  1002     0166                     l2106:
  1003                           
  1004                           ;main.c: 170:                 {;main.c: 171:                     cnt = 0;
  1005     0166  01C9               	clrf	task4@cnt
  1006     0167  01CA               	clrf	task4@cnt+1
  1007     0168                     l2108:
  1008                           
  1009                           ;main.c: 172:                     ckpin = PORTBbits.RB0;
  1010     0168  0806               	movf	6,w	;volatile
  1011     0169  3901               	andlw	1
  1012     016A  00D0               	movwf	task4@ckpin
  1013     016B                     l2110:
  1014                           
  1015                           ;main.c: 173:                     val = adcset;
  1016     016B  086F               	movf	_adcset,w
  1017     016C  00FB               	movwf	task4@val
  1018     016D                     l2112:
  1019                           
  1020                           ;main.c: 174:                     LCDGotoXY(12,0);
  1021     016D  01F2               	clrf	LCDGotoXY@row
  1022     016E  300C               	movlw	12
  1023     016F  120A  118A  24ED  120A  118A  	fcall	_LCDGotoXY
  1024     0174                     l2114:
  1025                           
  1026                           ;main.c: 175:                     LCDWriteCMD(0x0F & 0x0E);
  1027     0174  300E               	movlw	14
  1028     0175  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  1029     017A                     l2116:
  1030                           
  1031                           ;main.c: 176:                     setmode = 1;
  1032     017A  147A               	bsf	_setmode/(0+8),_setmode& (0+7)	;volatile
  1033     017B  294B               	goto	l2100
  1034     017C                     l2122:
  1035                           
  1036                           ;main.c: 183:             if(ckpin != PORTBbits.RB0)
  1037     017C  0806               	movf	6,w	;volatile
  1038     017D  3901               	andlw	1
  1039     017E  0650               	xorwf	task4@ckpin,w
  1040     017F  1903               	skipnz
  1041     0180  2982               	goto	u1881
  1042     0181  2983               	goto	u1880
  1043     0182                     u1881:
  1044     0182  29C0               	goto	l2144
  1045     0183                     u1880:
  1046     0183                     l2124:
  1047                           
  1048                           ;main.c: 184:             {;main.c: 185:                 ckpin = PORTBbits.RB0;
  1049     0183  0806               	movf	6,w	;volatile
  1050     0184  3901               	andlw	1
  1051     0185  00D0               	movwf	task4@ckpin
  1052     0186                     l2126:
  1053                           
  1054                           ;main.c: 186:                 if(PORTBbits.RB0 ^ PORTBbits.RB1)
  1055     0186  1886               	btfsc	6,1	;volatile
  1056     0187  2989               	goto	u1891
  1057     0188  298B               	goto	u1890
  1058     0189                     u1891:
  1059     0189  3001               	movlw	1
  1060     018A  298C               	goto	u1892
  1061     018B                     u1890:
  1062     018B  3000               	movlw	0
  1063     018C                     u1892:
  1064     018C  00E2               	movwf	??_task4
  1065     018D  1806               	btfsc	6,0	;volatile
  1066     018E  2990               	goto	u1901
  1067     018F  2992               	goto	u1900
  1068     0190                     u1901:
  1069     0190  3001               	movlw	1
  1070     0191  2993               	goto	u1902
  1071     0192                     u1900:
  1072     0192  3000               	movlw	0
  1073     0193                     u1902:
  1074     0193  0662               	xorwf	??_task4,w
  1075     0194  1903               	skipnz
  1076     0195  2997               	goto	u1911
  1077     0196  2998               	goto	u1910
  1078     0197                     u1911:
  1079     0197  29B1               	goto	l2136
  1080     0198                     u1910:
  1081     0198                     l2128:
  1082                           
  1083                           ;main.c: 187:                 {;main.c: 188:                     val++;
  1084     0198  3001               	movlw	1
  1085     0199  07FB               	addwf	task4@val,f
  1086     019A                     l2130:
  1087                           
  1088                           ;main.c: 189:                     if(val > 100) val = 100;
  1089     019A  3065               	movlw	101
  1090     019B  027B               	subwf	task4@val,w
  1091     019C  1C03               	skipc
  1092     019D  299F               	goto	u1921
  1093     019E  29A0               	goto	u1920
  1094     019F                     u1921:
  1095     019F  29A2               	goto	l2134
  1096     01A0                     u1920:
  1097     01A0                     l2132:
  1098     01A0  3064               	movlw	100
  1099     01A1  00FB               	movwf	task4@val
  1100     01A2                     l2134:
  1101                           
  1102                           ;main.c: 190:                     LCDWriteNum(val,3);
  1103     01A2  087B               	movf	task4@val,w
  1104     01A3  00E2               	movwf	??_task4
  1105     01A4  01E3               	clrf	??_task4+1
  1106     01A5  0862               	movf	??_task4,w
  1107     01A6  00D6               	movwf	LCDWriteNum@num
  1108     01A7  0863               	movf	??_task4+1,w
  1109     01A8  00D7               	movwf	LCDWriteNum@num+1
  1110     01A9  3003               	movlw	3
  1111     01AA  00D8               	movwf	LCDWriteNum@padn
  1112     01AB  120A  118A  2024  120A  118A  	fcall	_LCDWriteNum
  1113                           
  1114                           ;main.c: 191:                 }
  1115     01B0  29B9               	goto	l2142
  1116     01B1                     l2136:
  1117                           
  1118                           ;main.c: 193:                 {;main.c: 194:                     if(val > 0) val--;
  1119     01B1  087B               	movf	task4@val,w
  1120     01B2  1903               	btfsc	3,2
  1121     01B3  29B5               	goto	u1931
  1122     01B4  29B6               	goto	u1930
  1123     01B5                     u1931:
  1124     01B5  29A2               	goto	l2134
  1125     01B6                     u1930:
  1126     01B6                     l2138:
  1127     01B6  3001               	movlw	1
  1128     01B7  02FB               	subwf	task4@val,f
  1129     01B8  29A2               	goto	l2134
  1130     01B9                     l2142:
  1131                           
  1132                           ;main.c: 197:                 LCDGotoXY(12,0);
  1133     01B9  01F2               	clrf	LCDGotoXY@row
  1134     01BA  300C               	movlw	12
  1135     01BB  120A  118A  24ED  120A  118A  	fcall	_LCDGotoXY
  1136     01C0                     l2144:
  1137                           
  1138                           ;main.c: 199:             if(PORTBbits.RB2 == 0)
  1139     01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1140     01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1141     01C2  1906               	btfsc	6,2	;volatile
  1142     01C3  29C5               	goto	u1941
  1143     01C4  29C6               	goto	u1940
  1144     01C5                     u1941:
  1145     01C5  2950               	goto	l2102
  1146     01C6                     u1940:
  1147     01C6                     l2146:
  1148                           
  1149                           ;main.c: 200:             {;main.c: 201:                 cnt++;
  1150     01C6  3001               	movlw	1
  1151     01C7  07C9               	addwf	task4@cnt,f
  1152     01C8  1803               	skipnc
  1153     01C9  0ACA               	incf	task4@cnt+1,f
  1154     01CA  3000               	movlw	0
  1155     01CB  07CA               	addwf	task4@cnt+1,f
  1156                           
  1157                           ;main.c: 202:                 if(cnt > 999)
  1158     01CC  3003               	movlw	3
  1159     01CD  024A               	subwf	task4@cnt+1,w
  1160     01CE  30E8               	movlw	232
  1161     01CF  1903               	skipnz
  1162     01D0  0249               	subwf	task4@cnt,w
  1163     01D1  1C03               	skipc
  1164     01D2  29D4               	goto	u1951
  1165     01D3  29D5               	goto	u1950
  1166     01D4                     u1951:
  1167     01D4  2A08               	goto	l154
  1168     01D5                     u1950:
  1169     01D5  2949               	goto	l2098
  1170     01D6                     l150:	
  1171                           ;main.c: 210:         case 3:
  1172                           
  1173                           
  1174                           ;main.c: 211:             if(PORTBbits.RB2 == 1)
  1175     01D6  1D06               	btfss	6,2	;volatile
  1176     01D7  29D9               	goto	u1961
  1177     01D8  29DA               	goto	u1960
  1178     01D9                     u1961:
  1179     01D9  2950               	goto	l2102
  1180     01DA                     u1960:
  1181     01DA                     l2154:
  1182                           
  1183                           ;main.c: 212:             {;main.c: 213:                 cnt++;
  1184     01DA  3001               	movlw	1
  1185     01DB  07C9               	addwf	task4@cnt,f
  1186     01DC  1803               	skipnc
  1187     01DD  0ACA               	incf	task4@cnt+1,f
  1188     01DE  3000               	movlw	0
  1189     01DF  07CA               	addwf	task4@cnt+1,f
  1190                           
  1191                           ;main.c: 214:                 if(cnt > 99)
  1192     01E0  3000               	movlw	0
  1193     01E1  024A               	subwf	task4@cnt+1,w
  1194     01E2  3064               	movlw	100
  1195     01E3  1903               	skipnz
  1196     01E4  0249               	subwf	task4@cnt,w
  1197     01E5  1C03               	skipc
  1198     01E6  29E8               	goto	u1971
  1199     01E7  29E9               	goto	u1970
  1200     01E8                     u1971:
  1201     01E8  2A08               	goto	l154
  1202     01E9                     u1970:
  1203     01E9                     l2156:
  1204                           
  1205                           ;main.c: 215:                 {;main.c: 216:                     cnt = 0;
  1206     01E9  01C9               	clrf	task4@cnt
  1207     01EA  01CA               	clrf	task4@cnt+1
  1208     01EB                     l2158:
  1209                           
  1210                           ;main.c: 217:                     adcset = val;
  1211     01EB  087B               	movf	task4@val,w
  1212     01EC  00EF               	movwf	_adcset
  1213     01ED                     l2160:
  1214                           
  1215                           ;main.c: 218:                     LCDWriteCMD(0x0F & 0x0D & 0x0E);
  1216     01ED  300C               	movlw	12
  1217     01EE  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  1218     01F3                     l2162:
  1219                           
  1220                           ;main.c: 219:                     setmode = 0;
  1221     01F3  107A               	bcf	_setmode/(0+8),_setmode& (0+7)	;volatile
  1222     01F4                     l2164:
  1223                           
  1224                           ;main.c: 220:                     state = 0;
  1225     01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1226     01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1227     01F6  01D1               	clrf	task4@state
  1228     01F7  2A08               	goto	l154
  1229     01F8                     l2170:
  1230     01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1231     01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1232     01FA  0851               	movf	task4@state,w
  1233                           
  1234                           ; Switch size 1, requested type "simple"
  1235                           ; Number of cases is 4, Range of values is 0 to 3
  1236                           ; switch strategies available:
  1237                           ; Name         Instructions Cycles
  1238                           ; simple_byte           13     7 (average)
  1239                           ; direct_byte           20     8 (fixed)
  1240                           ; jumptable            260     6 (fixed)
  1241                           ;	Chosen strategy is simple_byte
  1242     01FB  3A00               	xorlw	0	; case 0
  1243     01FC  1903               	skipnz
  1244     01FD  2936               	goto	l132
  1245     01FE  3A01               	xorlw	1	; case 1
  1246     01FF  1903               	skipnz
  1247     0200  2953               	goto	l137
  1248     0201  3A03               	xorlw	3	; case 2
  1249     0202  1903               	skipnz
  1250     0203  297C               	goto	l2122
  1251     0204  3A01               	xorlw	1	; case 3
  1252     0205  1903               	skipnz
  1253     0206  29D6               	goto	l150
  1254     0207  2A08               	goto	l154
  1255     0208                     l154:
  1256     0208  0008               	return
  1257     0209                     __end_of_task4:
  1258                           
  1259                           	psect	text2
  1260     035D                     __ptext2:	
  1261 ;; *************** function _task3 *****************
  1262 ;; Defined at:
  1263 ;;		line 114 in file "main.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1277 ;;      Params:         0       0       0       0       0
  1278 ;;      Locals:         0       0       0       0       0
  1279 ;;      Temps:          0       2       0       0       0
  1280 ;;      Totals:         0       2       0       0       0
  1281 ;;Total ram usage:        2 bytes
  1282 ;; Hardware stack levels used: 1
  1283 ;; Hardware stack levels required when called: 6
  1284 ;; This function calls:
  1285 ;;		_LCDGotoXY
  1286 ;;		_LCDWriteMsgROM
  1287 ;;		_LCDWriteNum
  1288 ;;		_printf
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294     035D                     _task3:	
  1295                           ;psect for function _task3
  1296                           
  1297     035D                     l2060:	
  1298                           ;incstack = 0
  1299                           ; Regs used in _task3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1300                           
  1301                           
  1302                           ;main.c: 116:     static uint8_t adcres0;;main.c: 117:     static uint8_t adcset0;;main.
      +                          c: 118:     if(adcres0 != adcres)
  1303     035D  1283               	bcf	3,5	;RP0=0, select bank0
  1304     035E  1303               	bcf	3,6	;RP1=0, select bank0
  1305     035F  0853               	movf	task3@adcres0,w
  1306     0360  0655               	xorwf	_adcres,w
  1307     0361  1903               	skipnz
  1308     0362  2B64               	goto	u1811
  1309     0363  2B65               	goto	u1810
  1310     0364                     u1811:
  1311     0364  2BB8               	goto	l2084
  1312     0365                     u1810:
  1313     0365                     l2062:
  1314                           
  1315                           ;main.c: 119:     {;main.c: 120:         adcres0 = adcres;
  1316     0365  0855               	movf	_adcres,w
  1317     0366  00D3               	movwf	task3@adcres0
  1318     0367                     l2064:
  1319                           
  1320                           ;main.c: 121:         printf("ADC:%u\n", adcres0);
  1321     0367  301B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1322     0368  00E9               	movwf	printf@fmt
  1323     0369  0853               	movf	task3@adcres0,w
  1324     036A  00ED               	movwf	??_task3
  1325     036B  01EE               	clrf	??_task3+1
  1326     036C  086D               	movf	??_task3,w
  1327     036D  00EA               	movwf	?_printf+1
  1328     036E  086E               	movf	??_task3+1,w
  1329     036F  00EB               	movwf	?_printf+2
  1330     0370  120A  118A  271F  120A  118A  	fcall	_printf
  1331     0375                     l2066:
  1332                           
  1333                           ;main.c: 122:         LCDGotoXY(0,0);
  1334     0375  01F2               	clrf	LCDGotoXY@row
  1335     0376  3000               	movlw	0
  1336     0377  120A  118A  24ED  120A  118A  	fcall	_LCDGotoXY
  1337     037C                     l2068:
  1338                           
  1339                           ;main.c: 123:         LCDWriteMsgROM("ADC:");
  1340     037C  3023               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1341     037D  00F4               	movwf	LCDWriteMsgROM@str
  1342     037E  120A  118A  26F2  120A  118A  	fcall	_LCDWriteMsgROM
  1343     0383                     l2070:
  1344                           
  1345                           ;main.c: 124:         LCDWriteNum(adcres0,3);
  1346     0383  1283               	bcf	3,5	;RP0=0, select bank0
  1347     0384  1303               	bcf	3,6	;RP1=0, select bank0
  1348     0385  0853               	movf	task3@adcres0,w
  1349     0386  00ED               	movwf	??_task3
  1350     0387  01EE               	clrf	??_task3+1
  1351     0388  086D               	movf	??_task3,w
  1352     0389  00D6               	movwf	LCDWriteNum@num
  1353     038A  086E               	movf	??_task3+1,w
  1354     038B  00D7               	movwf	LCDWriteNum@num+1
  1355     038C  3003               	movlw	3
  1356     038D  00D8               	movwf	LCDWriteNum@padn
  1357     038E  120A  118A  2024  120A  118A  	fcall	_LCDWriteNum
  1358     0393                     l2072:
  1359                           
  1360                           ;main.c: 125:         LCDGotoXY(0,1);
  1361     0393  01F2               	clrf	LCDGotoXY@row
  1362     0394  0AF2               	incf	LCDGotoXY@row,f
  1363     0395  3000               	movlw	0
  1364     0396  120A  118A  24ED  120A  118A  	fcall	_LCDGotoXY
  1365     039B                     l2074:
  1366                           
  1367                           ;main.c: 126:         if(adcres0 > adcset0)
  1368     039B  1283               	bcf	3,5	;RP0=0, select bank0
  1369     039C  1303               	bcf	3,6	;RP1=0, select bank0
  1370     039D  0853               	movf	task3@adcres0,w
  1371     039E  0252               	subwf	task3@adcset0,w
  1372     039F  1803               	skipnc
  1373     03A0  2BA2               	goto	u1821
  1374     03A1  2BA3               	goto	u1820
  1375     03A2                     u1821:
  1376     03A2  2BAE               	goto	l2080
  1377     03A3                     u1820:
  1378     03A3                     l2076:
  1379                           
  1380                           ;main.c: 127:         {;main.c: 129:             LCDWriteMsgROM("** ALERTA **");
  1381     03A3  300E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1382     03A4  00F4               	movwf	LCDWriteMsgROM@str
  1383     03A5  120A  118A  26F2  120A  118A  	fcall	_LCDWriteMsgROM
  1384     03AA                     l2078:
  1385                           
  1386                           ;main.c: 130:             PORTBbits.RB3 = 1;
  1387     03AA  1283               	bcf	3,5	;RP0=0, select bank0
  1388     03AB  1303               	bcf	3,6	;RP1=0, select bank0
  1389     03AC  1586               	bsf	6,3	;volatile
  1390                           
  1391                           ;main.c: 131:         }
  1392     03AD  2BB8               	goto	l2084
  1393     03AE                     l2080:
  1394                           
  1395                           ;main.c: 133:         {;main.c: 134:             LCDWriteMsgROM("            ");
  1396     03AE  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1397     03AF  00F4               	movwf	LCDWriteMsgROM@str
  1398     03B0  120A  118A  26F2  120A  118A  	fcall	_LCDWriteMsgROM
  1399     03B5                     l2082:
  1400                           
  1401                           ;main.c: 135:             PORTBbits.RB3 = 0;
  1402     03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1403     03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1404     03B7  1186               	bcf	6,3	;volatile
  1405     03B8                     l2084:
  1406                           
  1407                           ;main.c: 138:     if(adcset0 != adcset)
  1408     03B8  0852               	movf	task3@adcset0,w
  1409     03B9  066F               	xorwf	_adcset,w
  1410     03BA  1903               	skipnz
  1411     03BB  2BBD               	goto	u1831
  1412     03BC  2BBE               	goto	u1830
  1413     03BD                     u1831:
  1414     03BD  2BDE               	goto	l120
  1415     03BE                     u1830:
  1416     03BE                     l2086:
  1417                           
  1418                           ;main.c: 139:     {;main.c: 140:         adcset0 = adcset;
  1419     03BE  086F               	movf	_adcset,w
  1420     03BF  00D2               	movwf	task3@adcset0
  1421     03C0                     l2088:
  1422                           
  1423                           ;main.c: 141:         LCDGotoXY(8,0);
  1424     03C0  01F2               	clrf	LCDGotoXY@row
  1425     03C1  3008               	movlw	8
  1426     03C2  120A  118A  24ED  120A  118A  	fcall	_LCDGotoXY
  1427     03C7                     l2090:
  1428                           
  1429                           ;main.c: 142:         LCDWriteMsgROM("SET:");
  1430     03C7  3028               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1431     03C8  00F4               	movwf	LCDWriteMsgROM@str
  1432     03C9  120A  118A  26F2  120A  118A  	fcall	_LCDWriteMsgROM
  1433     03CE                     l2092:
  1434                           
  1435                           ;main.c: 143:         LCDWriteNum(adcset0,3);
  1436     03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1437     03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1438     03D0  0852               	movf	task3@adcset0,w
  1439     03D1  00ED               	movwf	??_task3
  1440     03D2  01EE               	clrf	??_task3+1
  1441     03D3  086D               	movf	??_task3,w
  1442     03D4  00D6               	movwf	LCDWriteNum@num
  1443     03D5  086E               	movf	??_task3+1,w
  1444     03D6  00D7               	movwf	LCDWriteNum@num+1
  1445     03D7  3003               	movlw	3
  1446     03D8  00D8               	movwf	LCDWriteNum@padn
  1447     03D9  120A  118A  2024  120A  118A  	fcall	_LCDWriteNum
  1448     03DE                     l120:
  1449     03DE  0008               	return
  1450     03DF                     __end_of_task3:
  1451                           
  1452                           	psect	text3
  1453     071F                     __ptext3:	
  1454 ;; *************** function _printf *****************
  1455 ;; Defined at:
  1456 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/printf.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  fmt             1   19[BANK0 ] PTR const unsigned char 
  1459 ;;		 -> STR_1(8), 
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  ret             2    0        int 
  1462 ;;  ap              1   22[BANK0 ] PTR void [1]
  1463 ;;		 -> ?_printf(2), 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  2   19[BANK0 ] int 
  1466 ;; Registers used:
  1467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1473 ;;      Params:         0       3       0       0       0
  1474 ;;      Locals:         0       1       0       0       0
  1475 ;;      Temps:          0       0       0       0       0
  1476 ;;      Totals:         0       4       0       0       0
  1477 ;;Total ram usage:        4 bytes
  1478 ;; Hardware stack levels used: 1
  1479 ;; Hardware stack levels required when called: 5
  1480 ;; This function calls:
  1481 ;;		_vfprintf
  1482 ;; This function is called by:
  1483 ;;		_task3
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487     071F                     _printf:	
  1488                           ;psect for function _printf
  1489                           
  1490     071F                     l1986:	
  1491                           ;incstack = 0
  1492                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1493                           
  1494     071F  306A               	movlw	(low ((?_printf| 0+1)))& (0+255)
  1495     0720  1283               	bcf	3,5	;RP0=0, select bank0
  1496     0721  1303               	bcf	3,6	;RP1=0, select bank0
  1497     0722  00EC               	movwf	printf@ap
  1498     0723                     l1988:
  1499     0723  01E6               	clrf	vfprintf@fp
  1500     0724  0869               	movf	printf@fmt,w
  1501     0725  00E7               	movwf	vfprintf@fmt
  1502     0726  306C               	movlw	(low (printf@ap| 0))& (0+255)
  1503     0727  00E8               	movwf	vfprintf@ap
  1504     0728  120A  118A  26B2  120A  118A  	fcall	_vfprintf
  1505     072D                     l768:
  1506     072D  0008               	return
  1507     072E                     __end_of_printf:
  1508                           
  1509                           	psect	text4
  1510     06B2                     __ptext4:	
  1511 ;; *************** function _vfprintf *****************
  1512 ;; Defined at:
  1513 ;;		line 1817 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  1516 ;;		 -> NULL(0), 
  1517 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
  1518 ;;		 -> STR_1(8), 
  1519 ;;  ap              1   18[BANK0 ] PTR PTR void 
  1520 ;;		 -> printf@ap(1), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  cfmt            1    9[COMMON] PTR unsigned char 
  1523 ;;		 -> STR_1(8), 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  2   16[BANK0 ] int 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1533 ;;      Params:         0       3       0       0       0
  1534 ;;      Locals:         1       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0
  1536 ;;      Totals:         1       3       0       0       0
  1537 ;;Total ram usage:        4 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; Hardware stack levels required when called: 4
  1540 ;; This function calls:
  1541 ;;		_vfpfcnvrt
  1542 ;; This function is called by:
  1543 ;;		_printf
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547     06B2                     _vfprintf:	
  1548                           ;psect for function _vfprintf
  1549                           
  1550     06B2                     l1976:	
  1551                           ;incstack = 0
  1552                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1553                           
  1554                           
  1555                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1
      +                          818: {;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1820:     char *cfmt;;/
      +                          opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1822:     cfmt = (char *)fmt;
  1556     06B2  1283               	bcf	3,5	;RP0=0, select bank0
  1557     06B3  1303               	bcf	3,6	;RP1=0, select bank0
  1558     06B4  0867               	movf	vfprintf@fmt,w
  1559     06B5  00F9               	movwf	vfprintf@cfmt
  1560                           
  1561                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
  1562     06B6  2EC4               	goto	l1980
  1563     06B7                     l1978:
  1564                           
  1565                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt,
      +                           ap);
  1566     06B7  1283               	bcf	3,5	;RP0=0, select bank0
  1567     06B8  1303               	bcf	3,6	;RP1=0, select bank0
  1568     06B9  0866               	movf	vfprintf@fp,w
  1569     06BA  00DB               	movwf	vfpfcnvrt@fp
  1570     06BB  3079               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1571     06BC  00DC               	movwf	vfpfcnvrt@fmt
  1572     06BD  0868               	movf	vfprintf@ap,w
  1573     06BE  00DD               	movwf	vfpfcnvrt@ap
  1574     06BF  120A  118A  2209  120A  118A  	fcall	_vfpfcnvrt
  1575     06C4                     l1980:
  1576                           
  1577                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
  1578     06C4  0879               	movf	vfprintf@cfmt,w
  1579     06C5  0084               	movwf	4
  1580     06C6  120A  118A  2627  120A  118A  	fcall	stringdir
  1581     06CB  3A00               	xorlw	0
  1582     06CC  1D03               	skipz
  1583     06CD  2ECF               	goto	u1651
  1584     06CE  2ED0               	goto	u1650
  1585     06CF                     u1651:
  1586     06CF  2EB7               	goto	l1978
  1587     06D0                     u1650:
  1588     06D0                     l1982:
  1589                           
  1590                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1835:  return 0;
  1591     06D0  1283               	bcf	3,5	;RP0=0, select bank0
  1592     06D1  1303               	bcf	3,6	;RP1=0, select bank0
  1593     06D2  01E6               	clrf	?_vfprintf
  1594     06D3  01E7               	clrf	?_vfprintf+1
  1595     06D4                     l812:
  1596     06D4  0008               	return
  1597     06D5                     __end_of_vfprintf:
  1598                           
  1599                           	psect	text5
  1600     0209                     __ptext5:	
  1601 ;; *************** function _vfpfcnvrt *****************
  1602 ;; Defined at:
  1603 ;;		line 1177 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  fp              1    5[BANK0 ] PTR struct _IO_FILE
  1606 ;;		 -> NULL(0), 
  1607 ;;  fmt             1    6[BANK0 ] PTR PTR unsigned char 
  1608 ;;		 -> vfprintf@cfmt(1), 
  1609 ;;  ap              1    7[BANK0 ] PTR PTR void 
  1610 ;;		 -> printf@ap(1), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  convarg         4   10[BANK0 ] struct .
  1613 ;;  c               1   15[BANK0 ] unsigned char 
  1614 ;;  cp              1   14[BANK0 ] PTR unsigned char 
  1615 ;;		 -> STR_1(8), 
  1616 ;;  done            1    0        _Bool 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1626 ;;      Params:         0       3       0       0       0
  1627 ;;      Locals:         0       6       0       0       0
  1628 ;;      Temps:          0       2       0       0       0
  1629 ;;      Totals:         0      11       0       0       0
  1630 ;;Total ram usage:       11 bytes
  1631 ;; Hardware stack levels used: 1
  1632 ;; Hardware stack levels required when called: 3
  1633 ;; This function calls:
  1634 ;;		___lwdiv
  1635 ;;		___lwmod
  1636 ;;		_fputc
  1637 ;; This function is called by:
  1638 ;;		_vfprintf
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642     0209                     _vfpfcnvrt:	
  1643                           ;psect for function _vfpfcnvrt
  1644                           
  1645     0209                     l1934:	
  1646                           ;incstack = 0
  1647                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1648                           
  1649                           
  1650                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE *fp, cha
      +                          r *fmt[], va_list ap);/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1178: {;
      +                          /opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1179:     char c, *cp;;/opt/mi
      +                          crochip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1180:     _Bool done;;/opt/microchip/
      +                          xc8/v3.00/pic/sources/c99/common/doprnt.c: 1188:  } convarg;;/opt/microchip/xc8/v3.00/pi
      +                          c/sources/c99/common/doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1651     0209  1283               	bcf	3,5	;RP0=0, select bank0
  1652     020A  1303               	bcf	3,6	;RP1=0, select bank0
  1653     020B  085C               	movf	vfpfcnvrt@fmt,w
  1654     020C  0084               	movwf	4
  1655     020D  0800               	movf	0,w
  1656     020E  0084               	movwf	4
  1657     020F  120A  118A  2627  120A  118A  	fcall	stringdir
  1658     0214  3A25               	xorlw	37
  1659     0215  1D03               	skipz
  1660     0216  2A18               	goto	u1601
  1661     0217  2A19               	goto	u1600
  1662     0218                     u1601:
  1663     0218  2AB1               	goto	l1970
  1664     0219                     u1600:
  1665     0219                     l1936:
  1666                           
  1667                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt;
  1668     0219  085C               	movf	vfpfcnvrt@fmt,w
  1669     021A  0084               	movwf	4
  1670     021B  3001               	movlw	1
  1671     021C  0780               	addwf	0,f
  1672     021D                     l1938:
  1673                           
  1674                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1204:         flags = width =
      +                           0;
  1675     021D  01C5               	clrf	_width
  1676     021E  01C6               	clrf	_width+1
  1677     021F  3000               	movlw	0
  1678     0220  00CF               	movwf	_flags
  1679     0221                     l1940:
  1680                           
  1681                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1205:         prec = -1;
  1682     0221  30FF               	movlw	255
  1683     0222  00C7               	movwf	_prec
  1684     0223  30FF               	movlw	255
  1685     0224  00C8               	movwf	_prec+1
  1686     0225                     l1942:
  1687                           
  1688                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1439:   if (0
  1689     0225  085C               	movf	vfpfcnvrt@fmt,w
  1690     0226  0084               	movwf	4
  1691     0227  0800               	movf	0,w
  1692     0228  00E4               	movwf	vfpfcnvrt@cp
  1693     0229                     l1944:
  1694     0229  0864               	movf	vfpfcnvrt@cp,w
  1695     022A  0084               	movwf	4
  1696     022B  120A  118A  2627  120A  118A  	fcall	stringdir
  1697     0230  3A75               	xorlw	117
  1698     0231  1D03               	skipz
  1699     0232  2A34               	goto	u1611
  1700     0233  2A35               	goto	u1610
  1701     0234                     u1611:
  1702     0234  2AAA               	goto	l1966
  1703     0235                     u1610:
  1704     0235                     l1946:
  1705                           
  1706                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1452:     ) {;/opt/microchip/
      +                          xc8/v3.00/pic/sources/c99/common/doprnt.c: 1495:    convarg.uint = (vfpf_uint_t)(unsigne
      +                          d int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
  1707     0235  085D               	movf	vfpfcnvrt@ap,w
  1708     0236  0084               	movwf	4
  1709     0237  1383               	bcf	3,7	;select IRP bank0
  1710     0238  0800               	movf	0,w
  1711     0239  00DE               	movwf	??_vfpfcnvrt
  1712     023A  3002               	movlw	2
  1713     023B  0780               	addwf	0,f
  1714     023C  085E               	movf	??_vfpfcnvrt,w
  1715     023D  0084               	movwf	4
  1716     023E  0800               	movf	0,w
  1717     023F  00E0               	movwf	vfpfcnvrt@convarg
  1718     0240  0A84               	incf	4,f
  1719     0241  0800               	movf	0,w
  1720     0242  00E1               	movwf	vfpfcnvrt@convarg+1
  1721                           
  1722                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1497:    *fmt = cp+1;
  1723     0243  085C               	movf	vfpfcnvrt@fmt,w
  1724     0244  0084               	movwf	4
  1725     0245  0864               	movf	vfpfcnvrt@cp,w
  1726     0246  3E01               	addlw	1
  1727     0247  0080               	movwf	0
  1728                           
  1729                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1498:    switch (*cp) {
  1730     0248  2A9F               	goto	l1964
  1731     0249                     l797:	
  1732                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1523:     case 'u':
  1733                           
  1734                           
  1735                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1525:      c = sizeof(dbuf);
  1736     0249  3020               	movlw	32
  1737     024A  00E5               	movwf	vfpfcnvrt@c
  1738     024B                     l1948:
  1739                           
  1740                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1527:       dbuf[--c] = (conv
      +                          arg.uint % 10) + '0';
  1741     024B  3001               	movlw	1
  1742     024C  02E5               	subwf	vfpfcnvrt@c,f
  1743     024D  0865               	movf	vfpfcnvrt@c,w
  1744     024E  3E20               	addlw	(low (_dbuf| 0))& (0+255)
  1745     024F  0084               	movwf	4
  1746     0250  300A               	movlw	10
  1747     0251  00F2               	movwf	___lwmod@divisor
  1748     0252  3000               	movlw	0
  1749     0253  00F3               	movwf	___lwmod@divisor+1
  1750     0254  0861               	movf	vfpfcnvrt@convarg+1,w
  1751     0255  00F5               	movwf	___lwmod@dividend+1
  1752     0256  0860               	movf	vfpfcnvrt@convarg,w
  1753     0257  00F4               	movwf	___lwmod@dividend
  1754     0258  120A  118A  25B8  120A  118A  	fcall	___lwmod
  1755     025D  0872               	movf	?___lwmod,w
  1756     025E  3E30               	addlw	48
  1757     025F  1383               	bcf	3,7	;select IRP bank0
  1758     0260  0080               	movwf	0
  1759     0261                     l1950:
  1760                           
  1761                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1528:       convarg.uint /= 1
      +                          0;
  1762     0261  300A               	movlw	10
  1763     0262  00F2               	movwf	___lwdiv@divisor
  1764     0263  3000               	movlw	0
  1765     0264  00F3               	movwf	___lwdiv@divisor+1
  1766     0265  1283               	bcf	3,5	;RP0=0, select bank0
  1767     0266  1303               	bcf	3,6	;RP1=0, select bank0
  1768     0267  0861               	movf	vfpfcnvrt@convarg+1,w
  1769     0268  00F5               	movwf	___lwdiv@dividend+1
  1770     0269  0860               	movf	vfpfcnvrt@convarg,w
  1771     026A  00F4               	movwf	___lwdiv@dividend
  1772     026B  120A  118A  2538  120A  118A  	fcall	___lwdiv
  1773     0270  0873               	movf	?___lwdiv+1,w
  1774     0271  1283               	bcf	3,5	;RP0=0, select bank0
  1775     0272  1303               	bcf	3,6	;RP1=0, select bank0
  1776     0273  00E1               	movwf	vfpfcnvrt@convarg+1
  1777     0274  0872               	movf	?___lwdiv,w
  1778     0275  00E0               	movwf	vfpfcnvrt@convarg
  1779     0276                     l1952:
  1780                           
  1781                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1532:      } while (convarg.u
      +                          int != 0 && c != 0);
  1782     0276  0860               	movf	vfpfcnvrt@convarg,w
  1783     0277  0461               	iorwf	vfpfcnvrt@convarg+1,w
  1784     0278  1903               	btfsc	3,2
  1785     0279  2A7B               	goto	u1621
  1786     027A  2A7C               	goto	u1620
  1787     027B                     u1621:
  1788     027B  2A98               	goto	l1960
  1789     027C                     u1620:
  1790     027C                     l1954:
  1791     027C  0865               	movf	vfpfcnvrt@c,w
  1792     027D  1D03               	btfss	3,2
  1793     027E  2A80               	goto	u1631
  1794     027F  2A81               	goto	u1630
  1795     0280                     u1631:
  1796     0280  2A4B               	goto	l1948
  1797     0281                     u1630:
  1798     0281  2A98               	goto	l1960
  1799     0282                     l1956:
  1800                           
  1801                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1534:       fputc(dbuf[c++], 
      +                          fp);
  1802     0282  0865               	movf	vfpfcnvrt@c,w
  1803     0283  3E20               	addlw	(low (_dbuf| 0))& (0+255)
  1804     0284  0084               	movwf	4
  1805     0285  1383               	bcf	3,7	;select IRP bank0
  1806     0286  0800               	movf	0,w
  1807     0287  00DE               	movwf	??_vfpfcnvrt
  1808     0288  01DF               	clrf	??_vfpfcnvrt+1
  1809     0289  085E               	movf	??_vfpfcnvrt,w
  1810     028A  00F3               	movwf	fputc@c
  1811     028B  085F               	movf	??_vfpfcnvrt+1,w
  1812     028C  00F4               	movwf	fputc@c+1
  1813     028D  085B               	movf	vfpfcnvrt@fp,w
  1814     028E  00F5               	movwf	fputc@fp
  1815     028F  120A  118A  2442  120A  118A  	fcall	_fputc
  1816     0294                     l1958:
  1817     0294  3001               	movlw	1
  1818     0295  1283               	bcf	3,5	;RP0=0, select bank0
  1819     0296  1303               	bcf	3,6	;RP1=0, select bank0
  1820     0297  07E5               	addwf	vfpfcnvrt@c,f
  1821     0298                     l1960:
  1822                           
  1823                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1533:      while (c != sizeof
      +                          (dbuf)) {
  1824     0298  3020               	movlw	32
  1825     0299  0665               	xorwf	vfpfcnvrt@c,w
  1826     029A  1D03               	btfss	3,2
  1827     029B  2A9D               	goto	u1641
  1828     029C  2A9E               	goto	u1640
  1829     029D                     u1641:
  1830     029D  2A82               	goto	l1956
  1831     029E                     u1640:
  1832     029E  2AC8               	goto	l805
  1833     029F                     l1964:
  1834     029F  0864               	movf	vfpfcnvrt@cp,w
  1835     02A0  0084               	movwf	4
  1836     02A1  120A  118A  2627  120A  118A  	fcall	stringdir
  1837                           
  1838                           ; Switch size 1, requested type "simple"
  1839                           ; Number of cases is 1, Range of values is 117 to 117
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte            4     3 (average)
  1843                           ; direct_byte           14    11 (fixed)
  1844                           ; jumptable            263     9 (fixed)
  1845                           ;	Chosen strategy is simple_byte
  1846     02A6  3A75               	xorlw	117	; case 117
  1847     02A7  1903               	skipnz
  1848     02A8  2A49               	goto	l797
  1849     02A9  2AAA               	goto	l1966
  1850     02AA                     l1966:
  1851                           
  1852                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt;
  1853     02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1854     02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1855     02AC  085C               	movf	vfpfcnvrt@fmt,w
  1856     02AD  0084               	movwf	4
  1857     02AE  3001               	movlw	1
  1858     02AF  0780               	addwf	0,f
  1859     02B0  2AC8               	goto	l805
  1860     02B1                     l1970:
  1861                           
  1862                           ;/opt/microchip/xc8/v3.00/pic/sources/c99/common/doprnt.c: 1811:     fputc((int)(*fmt)[0
      +                          ], fp);
  1863     02B1  085C               	movf	vfpfcnvrt@fmt,w
  1864     02B2  0084               	movwf	4
  1865     02B3  0800               	movf	0,w
  1866     02B4  0084               	movwf	4
  1867     02B5  120A  118A  2627  120A  118A  	fcall	stringdir
  1868     02BA  00DE               	movwf	??_vfpfcnvrt
  1869     02BB  01DF               	clrf	??_vfpfcnvrt+1
  1870     02BC  085E               	movf	??_vfpfcnvrt,w
  1871     02BD  00F3               	movwf	fputc@c
  1872     02BE  085F               	movf	??_vfpfcnvrt+1,w
  1873     02BF  00F4               	movwf	fputc@c+1
  1874     02C0  085B               	movf	vfpfcnvrt@fp,w
  1875     02C1  00F5               	movwf	fputc@fp
  1876     02C2  120A  118A  2442  120A  118A  	fcall	_fputc
  1877     02C7  2AAA               	goto	l1966
  1878     02C8                     l805:
  1879     02C8  0008               	return
  1880     02C9                     __end_of_vfpfcnvrt:
  1881                           
  1882                           	psect	text6
  1883     0442                     __ptext6:	
  1884 ;; *************** function _fputc *****************
  1885 ;; Defined at:
  1886 ;;		line 8 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/nf_fputc.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  c               2    3[COMMON] int 
  1889 ;;  fp              1    5[COMMON] PTR struct _IO_FILE
  1890 ;;		 -> NULL(0), 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  2    3[COMMON] int 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1902 ;;      Params:         3       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0
  1904 ;;      Temps:          0       5       0       0       0
  1905 ;;      Totals:         3       5       0       0       0
  1906 ;;Total ram usage:        8 bytes
  1907 ;; Hardware stack levels used: 1
  1908 ;; Hardware stack levels required when called: 2
  1909 ;; This function calls:
  1910 ;;		_putch
  1911 ;; This function is called by:
  1912 ;;		_vfpfcnvrt
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916     0442                     _fputc:	
  1917                           ;psect for function _fputc
  1918                           
  1919     0442                     l1920:	
  1920                           ;incstack = 0
  1921                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1922                           
  1923     0442  0875               	movf	fputc@fp,w
  1924     0443  1903               	btfsc	3,2
  1925     0444  2C46               	goto	u1561
  1926     0445  2C47               	goto	u1560
  1927     0446                     u1561:
  1928     0446  2C4C               	goto	l1924
  1929     0447                     u1560:
  1930     0447                     l1922:
  1931     0447  0875               	movf	fputc@fp,w
  1932     0448  1D03               	btfss	3,2
  1933     0449  2C4B               	goto	u1571
  1934     044A  2C4C               	goto	u1570
  1935     044B                     u1571:
  1936     044B  2C53               	goto	l1926
  1937     044C                     u1570:
  1938     044C                     l1924:
  1939     044C  0873               	movf	fputc@c,w
  1940     044D  120A  118A  272E  120A  118A  	fcall	_putch
  1941     0452  2C98               	goto	l824
  1942     0453                     l1926:
  1943     0453  0875               	movf	fputc@fp,w
  1944     0454  3E08               	addlw	8
  1945     0455  0084               	movwf	4
  1946     0456  1383               	bcf	3,7	;select IRP bank0
  1947     0457  0800               	movf	0,w
  1948     0458  1283               	bcf	3,5	;RP0=0, select bank0
  1949     0459  1303               	bcf	3,6	;RP1=0, select bank0
  1950     045A  00D6               	movwf	??_fputc
  1951     045B  0A84               	incf	4,f
  1952     045C  0800               	movf	0,w
  1953     045D  00D7               	movwf	??_fputc+1
  1954     045E  0856               	movf	??_fputc,w
  1955     045F  0457               	iorwf	??_fputc+1,w
  1956     0460  1903               	btfsc	3,2
  1957     0461  2C63               	goto	u1581
  1958     0462  2C64               	goto	u1580
  1959     0463                     u1581:
  1960     0463  2C81               	goto	l1930
  1961     0464                     u1580:
  1962     0464                     l1928:
  1963     0464  0875               	movf	fputc@fp,w
  1964     0465  3E08               	addlw	8
  1965     0466  0084               	movwf	4
  1966     0467  0800               	movf	0,w
  1967     0468  00D6               	movwf	??_fputc
  1968     0469  0A84               	incf	4,f
  1969     046A  0800               	movf	0,w
  1970     046B  00D7               	movwf	??_fputc+1
  1971     046C  0A75               	incf	fputc@fp,w
  1972     046D  0084               	movwf	4
  1973     046E  0800               	movf	0,w
  1974     046F  00D8               	movwf	??_fputc+2
  1975     0470  0A84               	incf	4,f
  1976     0471  0800               	movf	0,w
  1977     0472  00D9               	movwf	??_fputc+3
  1978     0473  0859               	movf	??_fputc+3,w
  1979     0474  3A80               	xorlw	128
  1980     0475  00DA               	movwf	??_fputc+4
  1981     0476  0857               	movf	??_fputc+1,w
  1982     0477  3A80               	xorlw	128
  1983     0478  025A               	subwf	??_fputc+4,w
  1984     0479  1D03               	skipz
  1985     047A  2C7D               	goto	u1595
  1986     047B  0856               	movf	??_fputc,w
  1987     047C  0258               	subwf	??_fputc+2,w
  1988     047D                     u1595:
  1989     047D  1803               	skipnc
  1990     047E  2C80               	goto	u1591
  1991     047F  2C81               	goto	u1590
  1992     0480                     u1591:
  1993     0480  2C98               	goto	l824
  1994     0481                     u1590:
  1995     0481                     l1930:
  1996     0481  0A75               	incf	fputc@fp,w
  1997     0482  0084               	movwf	4
  1998     0483  1383               	bcf	3,7	;select IRP bank0
  1999     0484  0800               	movf	0,w
  2000     0485  1283               	bcf	3,5	;RP0=0, select bank0
  2001     0486  1303               	bcf	3,6	;RP1=0, select bank0
  2002     0487  00D6               	movwf	??_fputc
  2003     0488  0875               	movf	fputc@fp,w
  2004     0489  0084               	movwf	4
  2005     048A  0800               	movf	0,w
  2006     048B  0756               	addwf	??_fputc,w
  2007     048C  00D7               	movwf	??_fputc+1
  2008     048D  0857               	movf	??_fputc+1,w
  2009     048E  0084               	movwf	4
  2010     048F  0873               	movf	fputc@c,w
  2011     0490  0080               	movwf	0
  2012     0491  0A75               	incf	fputc@fp,w
  2013     0492  0084               	movwf	4
  2014     0493  3001               	movlw	1
  2015     0494  0780               	addwf	0,f
  2016     0495  0A84               	incf	4,f
  2017     0496  1803               	skipnc
  2018     0497  0A80               	incf	0,f
  2019     0498                     l824:
  2020     0498  0008               	return
  2021     0499                     __end_of_fputc:
  2022                           
  2023                           	psect	text7
  2024     072E                     __ptext7:	
  2025 ;; *************** function _putch *****************
  2026 ;; Defined at:
  2027 ;;		line 228 in file "main.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  byte            1    wreg     unsigned char 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  byte            1    2[COMMON] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2041 ;;      Params:         0       0       0       0       0
  2042 ;;      Locals:         1       0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0
  2044 ;;      Totals:         1       0       0       0       0
  2045 ;;Total ram usage:        1 bytes
  2046 ;; Hardware stack levels used: 1
  2047 ;; Hardware stack levels required when called: 1
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_fputc
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055     072E                     _putch:	
  2056                           ;psect for function _putch
  2057                           
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in _putch: [wreg]
  2061                           ;putch@byte stored from wreg
  2062     072E  00F2               	movwf	putch@byte
  2063     072F                     l1400:
  2064     072F                     l157:	
  2065                           ;main.c: 228: void putch(char byte);main.c: 229: {;main.c: 230:     while(PIR1bits.TXIF 
      +                          == 0) {};
  2066                           
  2067     072F  1283               	bcf	3,5	;RP0=0, select bank0
  2068     0730  1303               	bcf	3,6	;RP1=0, select bank0
  2069     0731  1E0C               	btfss	12,4	;volatile
  2070     0732  2F34               	goto	u791
  2071     0733  2F35               	goto	u790
  2072     0734                     u791:
  2073     0734  2F2F               	goto	l157
  2074     0735                     u790:
  2075     0735                     l1402:
  2076                           
  2077                           ;main.c: 231:     TXREG = byte;
  2078     0735  0872               	movf	putch@byte,w
  2079     0736  0099               	movwf	25	;volatile
  2080     0737                     l160:
  2081     0737  0008               	return
  2082     0738                     __end_of_putch:
  2083                           
  2084                           	psect	text8
  2085     0024                     __ptext8:	
  2086 ;; *************** function _LCDWriteNum *****************
  2087 ;; Defined at:
  2088 ;;		line 47 in file "lcd.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  num             2    0[BANK0 ] unsigned short 
  2091 ;;  padn            1    2[BANK0 ] unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  digs            5    5[BANK0 ] unsigned char [5]
  2094 ;;  i               1   11[BANK0 ] unsigned char 
  2095 ;;  res             1   10[BANK0 ] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2105 ;;      Params:         0       3       0       0       0
  2106 ;;      Locals:         0       7       0       0       0
  2107 ;;      Temps:          0       2       0       0       0
  2108 ;;      Totals:         0      12       0       0       0
  2109 ;;Total ram usage:       12 bytes
  2110 ;; Hardware stack levels used: 1
  2111 ;; Hardware stack levels required when called: 2
  2112 ;; This function calls:
  2113 ;;		_LCDWriteChar
  2114 ;;		___awdiv
  2115 ;;		___lwmod
  2116 ;; This function is called by:
  2117 ;;		_task3
  2118 ;;		_task4
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122     0024                     _LCDWriteNum:	
  2123                           ;psect for function _LCDWriteNum
  2124                           
  2125     0024                     l1992:	
  2126                           ;incstack = 0
  2127                           ; Regs used in _LCDWriteNum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2128                           
  2129                           
  2130                           ;lcd.c: 47: void LCDWriteNum(uint16_t num, uint8_t padn);lcd.c: 48: {;lcd.c: 49:     uin
      +                          t8_t digs[5] = {0,0,0,0,0};
  2131     0024  305B               	movlw	LCDWriteNum@digs& (0+255)
  2132     0025  0084               	movwf	4
  2133     0026  3005               	movlw	5
  2134     0027  00FF               	movwf	btemp+1
  2135     0028                     u1660:
  2136     0028  1383               	bcf	3,7	;select IRP bank0
  2137     0029  0180               	clrf	0
  2138     002A  0A84               	incf	4,f
  2139     002B  0BFF               	decfsz	btemp+1,f
  2140     002C  2828               	goto	u1660
  2141     002D                     l1994:
  2142                           
  2143                           ;lcd.c: 50:     uint8_t i, res;;lcd.c: 51:     if((num > 9999) && (padn > 4))
  2144     002D  3027               	movlw	39
  2145     002E  1283               	bcf	3,5	;RP0=0, select bank0
  2146     002F  1303               	bcf	3,6	;RP1=0, select bank0
  2147     0030  0257               	subwf	LCDWriteNum@num+1,w
  2148     0031  3010               	movlw	16
  2149     0032  1903               	skipnz
  2150     0033  0256               	subwf	LCDWriteNum@num,w
  2151     0034  1C03               	skipc
  2152     0035  2837               	goto	u1671
  2153     0036  2838               	goto	u1670
  2154     0037                     u1671:
  2155     0037  2865               	goto	l2000
  2156     0038                     u1670:
  2157     0038                     l1996:
  2158     0038  3005               	movlw	5
  2159     0039  0258               	subwf	LCDWriteNum@padn,w
  2160     003A  1C03               	skipc
  2161     003B  283D               	goto	u1681
  2162     003C  283E               	goto	u1680
  2163     003D                     u1681:
  2164     003D  2865               	goto	l2000
  2165     003E                     u1680:
  2166     003E                     l1998:
  2167                           
  2168                           ;lcd.c: 52:     {;lcd.c: 53:         digs[0] = (uint8_t) num / 10000;
  2169     003E  3010               	movlw	16
  2170     003F  00F2               	movwf	___awdiv@divisor
  2171     0040  3027               	movlw	39
  2172     0041  00F3               	movwf	___awdiv@divisor+1
  2173     0042  0856               	movf	LCDWriteNum@num,w
  2174     0043  00D9               	movwf	??_LCDWriteNum
  2175     0044  01DA               	clrf	??_LCDWriteNum+1
  2176     0045  0859               	movf	??_LCDWriteNum,w
  2177     0046  00F4               	movwf	___awdiv@dividend
  2178     0047  085A               	movf	??_LCDWriteNum+1,w
  2179     0048  00F5               	movwf	___awdiv@dividend+1
  2180     0049  120A  118A  23DF  120A  118A  	fcall	___awdiv
  2181     004E  0872               	movf	?___awdiv,w
  2182     004F  1283               	bcf	3,5	;RP0=0, select bank0
  2183     0050  1303               	bcf	3,6	;RP1=0, select bank0
  2184     0051  00DB               	movwf	LCDWriteNum@digs
  2185                           
  2186                           ;lcd.c: 54:         num = num % 10000;
  2187     0052  3010               	movlw	16
  2188     0053  00F2               	movwf	___lwmod@divisor
  2189     0054  3027               	movlw	39
  2190     0055  00F3               	movwf	___lwmod@divisor+1
  2191     0056  0857               	movf	LCDWriteNum@num+1,w
  2192     0057  00F5               	movwf	___lwmod@dividend+1
  2193     0058  0856               	movf	LCDWriteNum@num,w
  2194     0059  00F4               	movwf	___lwmod@dividend
  2195     005A  120A  118A  25B8  120A  118A  	fcall	___lwmod
  2196     005F  0873               	movf	?___lwmod+1,w
  2197     0060  1283               	bcf	3,5	;RP0=0, select bank0
  2198     0061  1303               	bcf	3,6	;RP1=0, select bank0
  2199     0062  00D7               	movwf	LCDWriteNum@num+1
  2200     0063  0872               	movf	?___lwmod,w
  2201     0064  00D6               	movwf	LCDWriteNum@num
  2202     0065                     l2000:
  2203                           
  2204                           ;lcd.c: 56:     if((num > 999) && (padn > 3))
  2205     0065  3003               	movlw	3
  2206     0066  0257               	subwf	LCDWriteNum@num+1,w
  2207     0067  30E8               	movlw	232
  2208     0068  1903               	skipnz
  2209     0069  0256               	subwf	LCDWriteNum@num,w
  2210     006A  1C03               	skipc
  2211     006B  286D               	goto	u1691
  2212     006C  286E               	goto	u1690
  2213     006D                     u1691:
  2214     006D  289B               	goto	l2006
  2215     006E                     u1690:
  2216     006E                     l2002:
  2217     006E  3004               	movlw	4
  2218     006F  0258               	subwf	LCDWriteNum@padn,w
  2219     0070  1C03               	skipc
  2220     0071  2873               	goto	u1701
  2221     0072  2874               	goto	u1700
  2222     0073                     u1701:
  2223     0073  289B               	goto	l2006
  2224     0074                     u1700:
  2225     0074                     l2004:
  2226                           
  2227                           ;lcd.c: 57:     {;lcd.c: 58:         digs[1] = (uint8_t) num / 1000;
  2228     0074  30E8               	movlw	232
  2229     0075  00F2               	movwf	___awdiv@divisor
  2230     0076  3003               	movlw	3
  2231     0077  00F3               	movwf	___awdiv@divisor+1
  2232     0078  0856               	movf	LCDWriteNum@num,w
  2233     0079  00D9               	movwf	??_LCDWriteNum
  2234     007A  01DA               	clrf	??_LCDWriteNum+1
  2235     007B  0859               	movf	??_LCDWriteNum,w
  2236     007C  00F4               	movwf	___awdiv@dividend
  2237     007D  085A               	movf	??_LCDWriteNum+1,w
  2238     007E  00F5               	movwf	___awdiv@dividend+1
  2239     007F  120A  118A  23DF  120A  118A  	fcall	___awdiv
  2240     0084  0872               	movf	?___awdiv,w
  2241     0085  1283               	bcf	3,5	;RP0=0, select bank0
  2242     0086  1303               	bcf	3,6	;RP1=0, select bank0
  2243     0087  00DC               	movwf	LCDWriteNum@digs+1
  2244                           
  2245                           ;lcd.c: 59:         num = num % 1000;
  2246     0088  30E8               	movlw	232
  2247     0089  00F2               	movwf	___lwmod@divisor
  2248     008A  3003               	movlw	3
  2249     008B  00F3               	movwf	___lwmod@divisor+1
  2250     008C  0857               	movf	LCDWriteNum@num+1,w
  2251     008D  00F5               	movwf	___lwmod@dividend+1
  2252     008E  0856               	movf	LCDWriteNum@num,w
  2253     008F  00F4               	movwf	___lwmod@dividend
  2254     0090  120A  118A  25B8  120A  118A  	fcall	___lwmod
  2255     0095  0873               	movf	?___lwmod+1,w
  2256     0096  1283               	bcf	3,5	;RP0=0, select bank0
  2257     0097  1303               	bcf	3,6	;RP1=0, select bank0
  2258     0098  00D7               	movwf	LCDWriteNum@num+1
  2259     0099  0872               	movf	?___lwmod,w
  2260     009A  00D6               	movwf	LCDWriteNum@num
  2261     009B                     l2006:
  2262                           
  2263                           ;lcd.c: 61:     if((num > 99) && (padn > 2))
  2264     009B  3000               	movlw	0
  2265     009C  0257               	subwf	LCDWriteNum@num+1,w
  2266     009D  3064               	movlw	100
  2267     009E  1903               	skipnz
  2268     009F  0256               	subwf	LCDWriteNum@num,w
  2269     00A0  1C03               	skipc
  2270     00A1  28A3               	goto	u1711
  2271     00A2  28A4               	goto	u1710
  2272     00A3                     u1711:
  2273     00A3  28D1               	goto	l2012
  2274     00A4                     u1710:
  2275     00A4                     l2008:
  2276     00A4  3003               	movlw	3
  2277     00A5  0258               	subwf	LCDWriteNum@padn,w
  2278     00A6  1C03               	skipc
  2279     00A7  28A9               	goto	u1721
  2280     00A8  28AA               	goto	u1720
  2281     00A9                     u1721:
  2282     00A9  28D1               	goto	l2012
  2283     00AA                     u1720:
  2284     00AA                     l2010:
  2285                           
  2286                           ;lcd.c: 62:     {;lcd.c: 63:         digs[2] = (uint8_t) num / 100;
  2287     00AA  3064               	movlw	100
  2288     00AB  00F2               	movwf	___awdiv@divisor
  2289     00AC  3000               	movlw	0
  2290     00AD  00F3               	movwf	___awdiv@divisor+1
  2291     00AE  0856               	movf	LCDWriteNum@num,w
  2292     00AF  00D9               	movwf	??_LCDWriteNum
  2293     00B0  01DA               	clrf	??_LCDWriteNum+1
  2294     00B1  0859               	movf	??_LCDWriteNum,w
  2295     00B2  00F4               	movwf	___awdiv@dividend
  2296     00B3  085A               	movf	??_LCDWriteNum+1,w
  2297     00B4  00F5               	movwf	___awdiv@dividend+1
  2298     00B5  120A  118A  23DF  120A  118A  	fcall	___awdiv
  2299     00BA  0872               	movf	?___awdiv,w
  2300     00BB  1283               	bcf	3,5	;RP0=0, select bank0
  2301     00BC  1303               	bcf	3,6	;RP1=0, select bank0
  2302     00BD  00DD               	movwf	LCDWriteNum@digs+2
  2303                           
  2304                           ;lcd.c: 64:         num = num % 100;
  2305     00BE  3064               	movlw	100
  2306     00BF  00F2               	movwf	___lwmod@divisor
  2307     00C0  3000               	movlw	0
  2308     00C1  00F3               	movwf	___lwmod@divisor+1
  2309     00C2  0857               	movf	LCDWriteNum@num+1,w
  2310     00C3  00F5               	movwf	___lwmod@dividend+1
  2311     00C4  0856               	movf	LCDWriteNum@num,w
  2312     00C5  00F4               	movwf	___lwmod@dividend
  2313     00C6  120A  118A  25B8  120A  118A  	fcall	___lwmod
  2314     00CB  0873               	movf	?___lwmod+1,w
  2315     00CC  1283               	bcf	3,5	;RP0=0, select bank0
  2316     00CD  1303               	bcf	3,6	;RP1=0, select bank0
  2317     00CE  00D7               	movwf	LCDWriteNum@num+1
  2318     00CF  0872               	movf	?___lwmod,w
  2319     00D0  00D6               	movwf	LCDWriteNum@num
  2320     00D1                     l2012:
  2321                           
  2322                           ;lcd.c: 66:     if((num > 9) && (padn > 1))
  2323     00D1  3000               	movlw	0
  2324     00D2  0257               	subwf	LCDWriteNum@num+1,w
  2325     00D3  300A               	movlw	10
  2326     00D4  1903               	skipnz
  2327     00D5  0256               	subwf	LCDWriteNum@num,w
  2328     00D6  1C03               	skipc
  2329     00D7  28D9               	goto	u1731
  2330     00D8  28DA               	goto	u1730
  2331     00D9                     u1731:
  2332     00D9  2907               	goto	l2018
  2333     00DA                     u1730:
  2334     00DA                     l2014:
  2335     00DA  3002               	movlw	2
  2336     00DB  0258               	subwf	LCDWriteNum@padn,w
  2337     00DC  1C03               	skipc
  2338     00DD  28DF               	goto	u1741
  2339     00DE  28E0               	goto	u1740
  2340     00DF                     u1741:
  2341     00DF  2907               	goto	l2018
  2342     00E0                     u1740:
  2343     00E0                     l2016:
  2344                           
  2345                           ;lcd.c: 67:     {;lcd.c: 68:         digs[3] = (uint8_t) num / 10;
  2346     00E0  300A               	movlw	10
  2347     00E1  00F2               	movwf	___awdiv@divisor
  2348     00E2  3000               	movlw	0
  2349     00E3  00F3               	movwf	___awdiv@divisor+1
  2350     00E4  0856               	movf	LCDWriteNum@num,w
  2351     00E5  00D9               	movwf	??_LCDWriteNum
  2352     00E6  01DA               	clrf	??_LCDWriteNum+1
  2353     00E7  0859               	movf	??_LCDWriteNum,w
  2354     00E8  00F4               	movwf	___awdiv@dividend
  2355     00E9  085A               	movf	??_LCDWriteNum+1,w
  2356     00EA  00F5               	movwf	___awdiv@dividend+1
  2357     00EB  120A  118A  23DF  120A  118A  	fcall	___awdiv
  2358     00F0  0872               	movf	?___awdiv,w
  2359     00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2360     00F2  1303               	bcf	3,6	;RP1=0, select bank0
  2361     00F3  00DE               	movwf	LCDWriteNum@digs+3
  2362                           
  2363                           ;lcd.c: 69:         num = num % 10;
  2364     00F4  300A               	movlw	10
  2365     00F5  00F2               	movwf	___lwmod@divisor
  2366     00F6  3000               	movlw	0
  2367     00F7  00F3               	movwf	___lwmod@divisor+1
  2368     00F8  0857               	movf	LCDWriteNum@num+1,w
  2369     00F9  00F5               	movwf	___lwmod@dividend+1
  2370     00FA  0856               	movf	LCDWriteNum@num,w
  2371     00FB  00F4               	movwf	___lwmod@dividend
  2372     00FC  120A  118A  25B8  120A  118A  	fcall	___lwmod
  2373     0101  0873               	movf	?___lwmod+1,w
  2374     0102  1283               	bcf	3,5	;RP0=0, select bank0
  2375     0103  1303               	bcf	3,6	;RP1=0, select bank0
  2376     0104  00D7               	movwf	LCDWriteNum@num+1
  2377     0105  0872               	movf	?___lwmod,w
  2378     0106  00D6               	movwf	LCDWriteNum@num
  2379     0107                     l2018:
  2380                           
  2381                           ;lcd.c: 71:     if(num && padn) digs[4] = (uint8_t) num;
  2382     0107  0856               	movf	LCDWriteNum@num,w
  2383     0108  0457               	iorwf	LCDWriteNum@num+1,w
  2384     0109  1903               	btfsc	3,2
  2385     010A  290C               	goto	u1751
  2386     010B  290D               	goto	u1750
  2387     010C                     u1751:
  2388     010C  2914               	goto	l2024
  2389     010D                     u1750:
  2390     010D                     l2020:
  2391     010D  0858               	movf	LCDWriteNum@padn,w
  2392     010E  1903               	btfsc	3,2
  2393     010F  2911               	goto	u1761
  2394     0110  2912               	goto	u1760
  2395     0111                     u1761:
  2396     0111  2914               	goto	l2024
  2397     0112                     u1760:
  2398     0112                     l2022:
  2399     0112  0856               	movf	LCDWriteNum@num,w
  2400     0113  00DF               	movwf	LCDWriteNum@digs+4
  2401     0114                     l2024:
  2402                           
  2403                           ;lcd.c: 72:     if(padn)
  2404     0114  0858               	movf	LCDWriteNum@padn,w
  2405     0115  1903               	btfsc	3,2
  2406     0116  2918               	goto	u1771
  2407     0117  2919               	goto	u1770
  2408     0118                     u1771:
  2409     0118  2934               	goto	l187
  2410     0119                     u1770:
  2411     0119                     l2026:
  2412                           
  2413                           ;lcd.c: 73:     {;lcd.c: 74:         i = 5-padn;
  2414     0119  0858               	movf	LCDWriteNum@padn,w
  2415     011A  3C05               	sublw	5
  2416     011B  00E1               	movwf	LCDWriteNum@i
  2417                           
  2418                           ;lcd.c: 75:         while(i < 5)
  2419     011C  292E               	goto	l2034
  2420     011D                     l2028:
  2421                           
  2422                           ;lcd.c: 76:         {;lcd.c: 77:             res = digs[i] + 0x30;
  2423     011D  0861               	movf	LCDWriteNum@i,w
  2424     011E  3E5B               	addlw	(low (LCDWriteNum@digs| 0))& (0+255)
  2425     011F  0084               	movwf	4
  2426     0120  1383               	bcf	3,7	;select IRP bank0
  2427     0121  0800               	movf	0,w
  2428     0122  3E30               	addlw	48
  2429     0123  00E0               	movwf	LCDWriteNum@res
  2430     0124                     l2030:
  2431                           
  2432                           ;lcd.c: 78:             LCDWriteChar(res);
  2433     0124  0860               	movf	LCDWriteNum@res,w
  2434     0125  120A  118A  2659  120A  118A  	fcall	_LCDWriteChar
  2435     012A                     l2032:
  2436                           
  2437                           ;lcd.c: 79:             i++;
  2438     012A  3001               	movlw	1
  2439     012B  1283               	bcf	3,5	;RP0=0, select bank0
  2440     012C  1303               	bcf	3,6	;RP1=0, select bank0
  2441     012D  07E1               	addwf	LCDWriteNum@i,f
  2442     012E                     l2034:
  2443                           
  2444                           ;lcd.c: 75:         while(i < 5)
  2445     012E  3005               	movlw	5
  2446     012F  0261               	subwf	LCDWriteNum@i,w
  2447     0130  1C03               	skipc
  2448     0131  2933               	goto	u1781
  2449     0132  2934               	goto	u1780
  2450     0133                     u1781:
  2451     0133  291D               	goto	l2028
  2452     0134                     u1780:
  2453     0134                     l187:
  2454     0134  0008               	return
  2455     0135                     __end_of_LCDWriteNum:
  2456                           
  2457                           	psect	text9
  2458     05B8                     __ptext9:	
  2459 ;; *************** function ___lwmod *****************
  2460 ;; Defined at:
  2461 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/lwmod.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  divisor         2    2[COMMON] unsigned int 
  2464 ;;  dividend        2    4[COMMON] unsigned int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  counter         1    6[COMMON] unsigned char 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  2    2[COMMON] unsigned int 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2476 ;;      Params:         4       0       0       0       0
  2477 ;;      Locals:         1       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0
  2479 ;;      Totals:         5       0       0       0       0
  2480 ;;Total ram usage:        5 bytes
  2481 ;; Hardware stack levels used: 1
  2482 ;; Hardware stack levels required when called: 1
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_LCDWriteNum
  2487 ;;		_vfpfcnvrt
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491     05B8                     ___lwmod:	
  2492                           ;psect for function ___lwmod
  2493                           
  2494     05B8                     l1430:	
  2495                           ;incstack = 0
  2496                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2497                           
  2498     05B8  0872               	movf	___lwmod@divisor,w
  2499     05B9  0473               	iorwf	___lwmod@divisor+1,w
  2500     05BA  1903               	btfsc	3,2
  2501     05BB  2DBD               	goto	u871
  2502     05BC  2DBE               	goto	u870
  2503     05BD                     u871:
  2504     05BD  2DEB               	goto	l1448
  2505     05BE                     u870:
  2506     05BE                     l1432:
  2507     05BE  3001               	movlw	1
  2508     05BF  00F6               	movwf	___lwmod@counter
  2509     05C0  2DCA               	goto	l1438
  2510     05C1                     l1434:
  2511     05C1  3001               	movlw	1
  2512     05C2                     u885:
  2513     05C2  1003               	clrc
  2514     05C3  0DF2               	rlf	___lwmod@divisor,f
  2515     05C4  0DF3               	rlf	___lwmod@divisor+1,f
  2516     05C5  3EFF               	addlw	-1
  2517     05C6  1D03               	skipz
  2518     05C7  2DC2               	goto	u885
  2519     05C8                     l1436:
  2520     05C8  3001               	movlw	1
  2521     05C9  07F6               	addwf	___lwmod@counter,f
  2522     05CA                     l1438:
  2523     05CA  1FF3               	btfss	___lwmod@divisor+1,7
  2524     05CB  2DCD               	goto	u891
  2525     05CC  2DCE               	goto	u890
  2526     05CD                     u891:
  2527     05CD  2DC1               	goto	l1434
  2528     05CE                     u890:
  2529     05CE                     l1440:
  2530     05CE  0873               	movf	___lwmod@divisor+1,w
  2531     05CF  0275               	subwf	___lwmod@dividend+1,w
  2532     05D0  1D03               	skipz
  2533     05D1  2DD4               	goto	u905
  2534     05D2  0872               	movf	___lwmod@divisor,w
  2535     05D3  0274               	subwf	___lwmod@dividend,w
  2536     05D4                     u905:
  2537     05D4  1C03               	skipc
  2538     05D5  2DD7               	goto	u901
  2539     05D6  2DD8               	goto	u900
  2540     05D7                     u901:
  2541     05D7  2DDE               	goto	l1444
  2542     05D8                     u900:
  2543     05D8                     l1442:
  2544     05D8  0872               	movf	___lwmod@divisor,w
  2545     05D9  02F4               	subwf	___lwmod@dividend,f
  2546     05DA  0873               	movf	___lwmod@divisor+1,w
  2547     05DB  1C03               	skipc
  2548     05DC  03F5               	decf	___lwmod@dividend+1,f
  2549     05DD  02F5               	subwf	___lwmod@dividend+1,f
  2550     05DE                     l1444:
  2551     05DE  3001               	movlw	1
  2552     05DF                     u915:
  2553     05DF  1003               	clrc
  2554     05E0  0CF3               	rrf	___lwmod@divisor+1,f
  2555     05E1  0CF2               	rrf	___lwmod@divisor,f
  2556     05E2  3EFF               	addlw	-1
  2557     05E3  1D03               	skipz
  2558     05E4  2DDF               	goto	u915
  2559     05E5                     l1446:
  2560     05E5  3001               	movlw	1
  2561     05E6  02F6               	subwf	___lwmod@counter,f
  2562     05E7  1D03               	btfss	3,2
  2563     05E8  2DEA               	goto	u921
  2564     05E9  2DEB               	goto	u920
  2565     05EA                     u921:
  2566     05EA  2DCE               	goto	l1440
  2567     05EB                     u920:
  2568     05EB                     l1448:
  2569     05EB  0875               	movf	___lwmod@dividend+1,w
  2570     05EC  00F3               	movwf	?___lwmod+1
  2571     05ED  0874               	movf	___lwmod@dividend,w
  2572     05EE  00F2               	movwf	?___lwmod
  2573     05EF                     l595:
  2574     05EF  0008               	return
  2575     05F0                     __end_of___lwmod:
  2576                           
  2577                           	psect	text10
  2578     03DF                     __ptext10:	
  2579 ;; *************** function ___awdiv *****************
  2580 ;; Defined at:
  2581 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/awdiv.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  divisor         2    2[COMMON] int 
  2584 ;;  dividend        2    4[COMMON] int 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  quotient        2    8[COMMON] int 
  2587 ;;  sign            1    7[COMMON] unsigned char 
  2588 ;;  counter         1    6[COMMON] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  2    2[COMMON] int 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         4       0       0       0       0
  2599 ;;      Locals:         4       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0
  2601 ;;      Totals:         8       0       0       0       0
  2602 ;;Total ram usage:        8 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; Hardware stack levels required when called: 1
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_LCDWriteNum
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612     03DF                     ___awdiv:	
  2613                           ;psect for function ___awdiv
  2614                           
  2615     03DF                     l1526:	
  2616                           ;incstack = 0
  2617                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2618                           
  2619     03DF  01F7               	clrf	___awdiv@sign
  2620     03E0                     l1528:
  2621     03E0  1FF3               	btfss	___awdiv@divisor+1,7
  2622     03E1  2BE3               	goto	u1031
  2623     03E2  2BE4               	goto	u1030
  2624     03E3                     u1031:
  2625     03E3  2BEB               	goto	l1534
  2626     03E4                     u1030:
  2627     03E4                     l1530:
  2628     03E4  09F2               	comf	___awdiv@divisor,f
  2629     03E5  09F3               	comf	___awdiv@divisor+1,f
  2630     03E6  0AF2               	incf	___awdiv@divisor,f
  2631     03E7  1903               	skipnz
  2632     03E8  0AF3               	incf	___awdiv@divisor+1,f
  2633     03E9                     l1532:
  2634     03E9  3001               	movlw	1
  2635     03EA  00F7               	movwf	___awdiv@sign
  2636     03EB                     l1534:
  2637     03EB  1FF5               	btfss	___awdiv@dividend+1,7
  2638     03EC  2BEE               	goto	u1041
  2639     03ED  2BEF               	goto	u1040
  2640     03EE                     u1041:
  2641     03EE  2BF6               	goto	l1540
  2642     03EF                     u1040:
  2643     03EF                     l1536:
  2644     03EF  09F4               	comf	___awdiv@dividend,f
  2645     03F0  09F5               	comf	___awdiv@dividend+1,f
  2646     03F1  0AF4               	incf	___awdiv@dividend,f
  2647     03F2  1903               	skipnz
  2648     03F3  0AF5               	incf	___awdiv@dividend+1,f
  2649     03F4                     l1538:
  2650     03F4  3001               	movlw	1
  2651     03F5  06F7               	xorwf	___awdiv@sign,f
  2652     03F6                     l1540:
  2653     03F6  01F8               	clrf	___awdiv@quotient
  2654     03F7  01F9               	clrf	___awdiv@quotient+1
  2655     03F8                     l1542:
  2656     03F8  0872               	movf	___awdiv@divisor,w
  2657     03F9  0473               	iorwf	___awdiv@divisor+1,w
  2658     03FA  1903               	btfsc	3,2
  2659     03FB  2BFD               	goto	u1051
  2660     03FC  2BFE               	goto	u1050
  2661     03FD                     u1051:
  2662     03FD  2C33               	goto	l1562
  2663     03FE                     u1050:
  2664     03FE                     l1544:
  2665     03FE  3001               	movlw	1
  2666     03FF  00F6               	movwf	___awdiv@counter
  2667     0400  2C0A               	goto	l1550
  2668     0401                     l1546:
  2669     0401  3001               	movlw	1
  2670     0402                     u1065:
  2671     0402  1003               	clrc
  2672     0403  0DF2               	rlf	___awdiv@divisor,f
  2673     0404  0DF3               	rlf	___awdiv@divisor+1,f
  2674     0405  3EFF               	addlw	-1
  2675     0406  1D03               	skipz
  2676     0407  2C02               	goto	u1065
  2677     0408                     l1548:
  2678     0408  3001               	movlw	1
  2679     0409  07F6               	addwf	___awdiv@counter,f
  2680     040A                     l1550:
  2681     040A  1FF3               	btfss	___awdiv@divisor+1,7
  2682     040B  2C0D               	goto	u1071
  2683     040C  2C0E               	goto	u1070
  2684     040D                     u1071:
  2685     040D  2C01               	goto	l1546
  2686     040E                     u1070:
  2687     040E                     l1552:
  2688     040E  3001               	movlw	1
  2689     040F                     u1085:
  2690     040F  1003               	clrc
  2691     0410  0DF8               	rlf	___awdiv@quotient,f
  2692     0411  0DF9               	rlf	___awdiv@quotient+1,f
  2693     0412  3EFF               	addlw	-1
  2694     0413  1D03               	skipz
  2695     0414  2C0F               	goto	u1085
  2696     0415  0873               	movf	___awdiv@divisor+1,w
  2697     0416  0275               	subwf	___awdiv@dividend+1,w
  2698     0417  1D03               	skipz
  2699     0418  2C1B               	goto	u1095
  2700     0419  0872               	movf	___awdiv@divisor,w
  2701     041A  0274               	subwf	___awdiv@dividend,w
  2702     041B                     u1095:
  2703     041B  1C03               	skipc
  2704     041C  2C1E               	goto	u1091
  2705     041D  2C1F               	goto	u1090
  2706     041E                     u1091:
  2707     041E  2C26               	goto	l1558
  2708     041F                     u1090:
  2709     041F                     l1554:
  2710     041F  0872               	movf	___awdiv@divisor,w
  2711     0420  02F4               	subwf	___awdiv@dividend,f
  2712     0421  0873               	movf	___awdiv@divisor+1,w
  2713     0422  1C03               	skipc
  2714     0423  03F5               	decf	___awdiv@dividend+1,f
  2715     0424  02F5               	subwf	___awdiv@dividend+1,f
  2716     0425                     l1556:
  2717     0425  1478               	bsf	___awdiv@quotient,0
  2718     0426                     l1558:
  2719     0426  3001               	movlw	1
  2720     0427                     u1105:
  2721     0427  1003               	clrc
  2722     0428  0CF3               	rrf	___awdiv@divisor+1,f
  2723     0429  0CF2               	rrf	___awdiv@divisor,f
  2724     042A  3EFF               	addlw	-1
  2725     042B  1D03               	skipz
  2726     042C  2C27               	goto	u1105
  2727     042D                     l1560:
  2728     042D  3001               	movlw	1
  2729     042E  02F6               	subwf	___awdiv@counter,f
  2730     042F  1D03               	btfss	3,2
  2731     0430  2C32               	goto	u1111
  2732     0431  2C33               	goto	u1110
  2733     0432                     u1111:
  2734     0432  2C0E               	goto	l1552
  2735     0433                     u1110:
  2736     0433                     l1562:
  2737     0433  0877               	movf	___awdiv@sign,w
  2738     0434  1903               	btfsc	3,2
  2739     0435  2C37               	goto	u1121
  2740     0436  2C38               	goto	u1120
  2741     0437                     u1121:
  2742     0437  2C3D               	goto	l1566
  2743     0438                     u1120:
  2744     0438                     l1564:
  2745     0438  09F8               	comf	___awdiv@quotient,f
  2746     0439  09F9               	comf	___awdiv@quotient+1,f
  2747     043A  0AF8               	incf	___awdiv@quotient,f
  2748     043B  1903               	skipnz
  2749     043C  0AF9               	incf	___awdiv@quotient+1,f
  2750     043D                     l1566:
  2751     043D  0879               	movf	___awdiv@quotient+1,w
  2752     043E  00F3               	movwf	?___awdiv+1
  2753     043F  0878               	movf	___awdiv@quotient,w
  2754     0440  00F2               	movwf	?___awdiv
  2755     0441                     l458:
  2756     0441  0008               	return
  2757     0442                     __end_of___awdiv:
  2758                           
  2759                           	psect	text11
  2760     06F2                     __ptext11:	
  2761 ;; *************** function _LCDWriteMsgROM *****************
  2762 ;; Defined at:
  2763 ;;		line 171 in file "lcd.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  str             1    4[COMMON] PTR const unsigned char 
  2766 ;;		 -> STR_5(5), STR_4(13), STR_3(13), STR_2(5), 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;		None
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2778 ;;      Params:         1       0       0       0       0
  2779 ;;      Locals:         0       0       0       0       0
  2780 ;;      Temps:          0       0       0       0       0
  2781 ;;      Totals:         1       0       0       0       0
  2782 ;;Total ram usage:        1 bytes
  2783 ;; Hardware stack levels used: 1
  2784 ;; Hardware stack levels required when called: 2
  2785 ;; This function calls:
  2786 ;;		_LCDWriteChar
  2787 ;; This function is called by:
  2788 ;;		_task3
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792     06F2                     _LCDWriteMsgROM:	
  2793                           ;psect for function _LCDWriteMsgROM
  2794                           
  2795     06F2                     l1610:	
  2796                           ;incstack = 0
  2797                           ; Regs used in _LCDWriteMsgROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2798                           
  2799                           
  2800                           ;lcd.c: 171: void LCDWriteMsgROM(const char *str);lcd.c: 172: {;lcd.c: 173:     while(*s
      +                          tr)
  2801     06F2  2F01               	goto	l1616
  2802     06F3                     l1612:
  2803                           
  2804                           ;lcd.c: 174:     {;lcd.c: 175:      LCDWriteChar(*str);
  2805     06F3  0874               	movf	LCDWriteMsgROM@str,w
  2806     06F4  0084               	movwf	4
  2807     06F5  120A  118A  2627  120A  118A  	fcall	stringdir
  2808     06FA  120A  118A  2659  120A  118A  	fcall	_LCDWriteChar
  2809     06FF                     l1614:
  2810                           
  2811                           ;lcd.c: 176:         str++;
  2812     06FF  3001               	movlw	1
  2813     0700  07F4               	addwf	LCDWriteMsgROM@str,f
  2814     0701                     l1616:
  2815                           
  2816                           ;lcd.c: 173:     while(*str)
  2817     0701  0874               	movf	LCDWriteMsgROM@str,w
  2818     0702  0084               	movwf	4
  2819     0703  120A  118A  2627  120A  118A  	fcall	stringdir
  2820     0708  3A00               	xorlw	0
  2821     0709  1D03               	skipz
  2822     070A  2F0C               	goto	u1151
  2823     070B  2F0D               	goto	u1150
  2824     070C                     u1151:
  2825     070C  2EF3               	goto	l1612
  2826     070D                     u1150:
  2827     070D                     l213:
  2828     070D  0008               	return
  2829     070E                     __end_of_LCDWriteMsgROM:
  2830                           
  2831                           	psect	text12
  2832     0659                     __ptext12:	
  2833 ;; *************** function _LCDWriteChar *****************
  2834 ;; Defined at:
  2835 ;;		line 17 in file "lcd.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  data            1    wreg     unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  data            1    3[COMMON] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       0       0       0       0
  2850 ;;      Locals:         1       0       0       0       0
  2851 ;;      Temps:          1       0       0       0       0
  2852 ;;      Totals:         2       0       0       0       0
  2853 ;;Total ram usage:        2 bytes
  2854 ;; Hardware stack levels used: 1
  2855 ;; Hardware stack levels required when called: 1
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_LCDWriteNum
  2860 ;;		_LCDWriteMsgROM
  2861 ;;		_LCDWriteMsg
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865     0659                     _LCDWriteChar:	
  2866                           ;psect for function _LCDWriteChar
  2867                           
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0]
  2871                           ;LCDWriteChar@data stored from wreg
  2872     0659  00F3               	movwf	LCDWriteChar@data
  2873     065A                     l1508:
  2874                           
  2875                           ;lcd.c: 17: void LCDWriteChar(char data);lcd.c: 18: {;lcd.c: 19:     PORTCbits.RC5 = 1;
  2876     065A  1283               	bcf	3,5	;RP0=0, select bank0
  2877     065B  1303               	bcf	3,6	;RP1=0, select bank0
  2878     065C  1687               	bsf	7,5	;volatile
  2879     065D                     l1510:
  2880                           
  2881                           ;lcd.c: 20:     TRISC &= 0xF0;
  2882     065D  30F0               	movlw	240
  2883     065E  1683               	bsf	3,5	;RP0=1, select bank1
  2884     065F  1303               	bcf	3,6	;RP1=0, select bank1
  2885     0660  0587               	andwf	7,f	;volatile
  2886                           
  2887                           ;lcd.c: 21:     PORTC &= 0xF0;
  2888     0661  30F0               	movlw	240
  2889     0662  1283               	bcf	3,5	;RP0=0, select bank0
  2890     0663  1303               	bcf	3,6	;RP1=0, select bank0
  2891     0664  0587               	andwf	7,f	;volatile
  2892                           
  2893                           ;lcd.c: 25:     PORTC |= (data >> 4);
  2894     0665  0873               	movf	LCDWriteChar@data,w
  2895     0666  00F2               	movwf	??_LCDWriteChar
  2896     0667  3004               	movlw	4
  2897     0668                     u1025:
  2898     0668  1003               	clrc
  2899     0669  0CF2               	rrf	??_LCDWriteChar,f
  2900     066A  3EFF               	addlw	-1
  2901     066B  1D03               	skipz
  2902     066C  2E68               	goto	u1025
  2903     066D  0872               	movf	??_LCDWriteChar,w
  2904     066E  0487               	iorwf	7,f	;volatile
  2905     066F                     l1512:
  2906                           
  2907                           ;lcd.c: 27:     PORTCbits.RC4 = 1;
  2908     066F  1607               	bsf	7,4	;volatile
  2909     0670                     l1514:
  2910                           
  2911                           ;lcd.c: 28:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2912     0670  2E71               	nop2	;2 cycle nop
  2913     0671                     l1516:
  2914                           
  2915                           ;lcd.c: 29:     PORTCbits.RC4 = 0;
  2916     0671  1283               	bcf	3,5	;RP0=0, select bank0
  2917     0672  1303               	bcf	3,6	;RP1=0, select bank0
  2918     0673  1207               	bcf	7,4	;volatile
  2919                           
  2920                           ;lcd.c: 30:     PORTC &= 0xF0;
  2921     0674  30F0               	movlw	240
  2922     0675  0587               	andwf	7,f	;volatile
  2923                           
  2924                           ;lcd.c: 34:     PORTC |= data & ~(0xF0);
  2925     0676  0873               	movf	LCDWriteChar@data,w
  2926     0677  390F               	andlw	15
  2927     0678  0487               	iorwf	7,f	;volatile
  2928     0679                     l1518:
  2929                           
  2930                           ;lcd.c: 36:     PORTCbits.RC4 = 1;
  2931     0679  1607               	bsf	7,4	;volatile
  2932     067A                     l1520:
  2933                           
  2934                           ;lcd.c: 37:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2935     067A  2E7B               	nop2	;2 cycle nop
  2936     067B                     l1522:
  2937                           
  2938                           ;lcd.c: 38:     PORTCbits.RC4 = 0;
  2939     067B  1283               	bcf	3,5	;RP0=0, select bank0
  2940     067C  1303               	bcf	3,6	;RP1=0, select bank0
  2941     067D  1207               	bcf	7,4	;volatile
  2942                           
  2943                           ;lcd.c: 39:     TRISC |= ~0xF0;
  2944     067E  300F               	movlw	15
  2945     067F  1683               	bsf	3,5	;RP0=1, select bank1
  2946     0680  1303               	bcf	3,6	;RP1=0, select bank1
  2947     0681  0487               	iorwf	7,f	;volatile
  2948     0682                     l1524:
  2949                           
  2950                           ;lcd.c: 40:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2951     0682  3021               	movlw	33
  2952     0683  00F2               	movwf	??_LCDWriteChar
  2953     0684                     u2007:
  2954     0684  0BF2               	decfsz	??_LCDWriteChar,f
  2955     0685  2E84               	goto	u2007
  2956     0686                     l173:
  2957     0686  0008               	return
  2958     0687                     __end_of_LCDWriteChar:
  2959                           
  2960                           	psect	text13
  2961     04ED                     __ptext13:	
  2962 ;; *************** function _LCDGotoXY *****************
  2963 ;; Defined at:
  2964 ;;		line 119 in file "lcd.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  col             1    wreg     unsigned char 
  2967 ;;  row             1    2[COMMON] unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  col             1    4[COMMON] unsigned char 
  2970 ;;  DDaddr          1    5[COMMON] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2980 ;;      Params:         1       0       0       0       0
  2981 ;;      Locals:         2       0       0       0       0
  2982 ;;      Temps:          1       0       0       0       0
  2983 ;;      Totals:         4       0       0       0       0
  2984 ;;Total ram usage:        4 bytes
  2985 ;; Hardware stack levels used: 1
  2986 ;; Hardware stack levels required when called: 1
  2987 ;; This function calls:
  2988 ;;		Nothing
  2989 ;; This function is called by:
  2990 ;;		_task3
  2991 ;;		_task4
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995     04ED                     _LCDGotoXY:	
  2996                           ;psect for function _LCDGotoXY
  2997                           
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0]
  3001                           ;LCDGotoXY@col stored from wreg
  3002     04ED  00F4               	movwf	LCDGotoXY@col
  3003     04EE                     l1586:
  3004                           
  3005                           ;lcd.c: 119: void LCDGotoXY(uint8_t col, uint8_t row);lcd.c: 120: {;lcd.c: 121:     uint
      +                          8_t DDaddr;;lcd.c: 122:     switch(row)
  3006     04EE  2CFB               	goto	l1590
  3007     04EF                     l196:	
  3008                           ;lcd.c: 123:     {;lcd.c: 124:         case 0: DDaddr = 0x80; break;
  3009                           
  3010     04EF  3080               	movlw	128
  3011     04F0  00F5               	movwf	LCDGotoXY@DDaddr
  3012     04F1  2D09               	goto	l1592
  3013     04F2                     l198:	
  3014                           ;lcd.c: 125:         case 1: DDaddr = 0xC0; break;
  3015                           
  3016     04F2  30C0               	movlw	192
  3017     04F3  00F5               	movwf	LCDGotoXY@DDaddr
  3018     04F4  2D09               	goto	l1592
  3019     04F5                     l199:	
  3020                           ;lcd.c: 126:         case 2: DDaddr = 0x94; break;
  3021                           
  3022     04F5  3094               	movlw	148
  3023     04F6  00F5               	movwf	LCDGotoXY@DDaddr
  3024     04F7  2D09               	goto	l1592
  3025     04F8                     l200:	
  3026                           ;lcd.c: 127:         case 3: DDaddr = 0xD4; break;
  3027                           
  3028     04F8  30D4               	movlw	212
  3029     04F9  00F5               	movwf	LCDGotoXY@DDaddr
  3030     04FA  2D09               	goto	l1592
  3031     04FB                     l1590:
  3032     04FB  0872               	movf	LCDGotoXY@row,w
  3033                           
  3034                           ; Switch size 1, requested type "simple"
  3035                           ; Number of cases is 4, Range of values is 0 to 3
  3036                           ; switch strategies available:
  3037                           ; Name         Instructions Cycles
  3038                           ; simple_byte           13     7 (average)
  3039                           ; direct_byte           20     8 (fixed)
  3040                           ; jumptable            260     6 (fixed)
  3041                           ;	Chosen strategy is simple_byte
  3042     04FC  3A00               	xorlw	0	; case 0
  3043     04FD  1903               	skipnz
  3044     04FE  2CEF               	goto	l196
  3045     04FF  3A01               	xorlw	1	; case 1
  3046     0500  1903               	skipnz
  3047     0501  2CF2               	goto	l198
  3048     0502  3A03               	xorlw	3	; case 2
  3049     0503  1903               	skipnz
  3050     0504  2CF5               	goto	l199
  3051     0505  3A01               	xorlw	1	; case 3
  3052     0506  1903               	skipnz
  3053     0507  2CF8               	goto	l200
  3054     0508  2D09               	goto	l1592
  3055     0509                     l1592:
  3056                           
  3057                           ;lcd.c: 129:     DDaddr += col;
  3058     0509  0874               	movf	LCDGotoXY@col,w
  3059     050A  07F5               	addwf	LCDGotoXY@DDaddr,f
  3060     050B                     l1594:
  3061                           
  3062                           ;lcd.c: 130:     PORTCbits.RC5 = 0;
  3063     050B  1283               	bcf	3,5	;RP0=0, select bank0
  3064     050C  1303               	bcf	3,6	;RP1=0, select bank0
  3065     050D  1287               	bcf	7,5	;volatile
  3066                           
  3067                           ;lcd.c: 131:     TRISC &= 0xF0;
  3068     050E  30F0               	movlw	240
  3069     050F  1683               	bsf	3,5	;RP0=1, select bank1
  3070     0510  1303               	bcf	3,6	;RP1=0, select bank1
  3071     0511  0587               	andwf	7,f	;volatile
  3072                           
  3073                           ;lcd.c: 132:     PORTC &= 0xF0;
  3074     0512  30F0               	movlw	240
  3075     0513  1283               	bcf	3,5	;RP0=0, select bank0
  3076     0514  1303               	bcf	3,6	;RP1=0, select bank0
  3077     0515  0587               	andwf	7,f	;volatile
  3078                           
  3079                           ;lcd.c: 136:     PORTC |= (DDaddr >> 4);
  3080     0516  0875               	movf	LCDGotoXY@DDaddr,w
  3081     0517  00F3               	movwf	??_LCDGotoXY
  3082     0518  3004               	movlw	4
  3083     0519                     u1145:
  3084     0519  1003               	clrc
  3085     051A  0CF3               	rrf	??_LCDGotoXY,f
  3086     051B  3EFF               	addlw	-1
  3087     051C  1D03               	skipz
  3088     051D  2D19               	goto	u1145
  3089     051E  0873               	movf	??_LCDGotoXY,w
  3090     051F  0487               	iorwf	7,f	;volatile
  3091     0520                     l1596:
  3092                           
  3093                           ;lcd.c: 138:     PORTCbits.RC4 = 1;
  3094     0520  1607               	bsf	7,4	;volatile
  3095     0521                     l1598:
  3096                           
  3097                           ;lcd.c: 139:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3098     0521  2D22               	nop2	;2 cycle nop
  3099     0522                     l1600:
  3100                           
  3101                           ;lcd.c: 140:     PORTCbits.RC4 = 0;
  3102     0522  1283               	bcf	3,5	;RP0=0, select bank0
  3103     0523  1303               	bcf	3,6	;RP1=0, select bank0
  3104     0524  1207               	bcf	7,4	;volatile
  3105                           
  3106                           ;lcd.c: 141:     PORTC &= 0xF0;
  3107     0525  30F0               	movlw	240
  3108     0526  0587               	andwf	7,f	;volatile
  3109                           
  3110                           ;lcd.c: 145:     PORTC |= DDaddr & ~(0xF0);
  3111     0527  0875               	movf	LCDGotoXY@DDaddr,w
  3112     0528  390F               	andlw	15
  3113     0529  0487               	iorwf	7,f	;volatile
  3114     052A                     l1602:
  3115                           
  3116                           ;lcd.c: 147:     PORTCbits.RC4 = 1;
  3117     052A  1607               	bsf	7,4	;volatile
  3118     052B                     l1604:
  3119                           
  3120                           ;lcd.c: 148:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3121     052B  2D2C               	nop2	;2 cycle nop
  3122     052C                     l1606:
  3123                           
  3124                           ;lcd.c: 149:     PORTCbits.RC4 = 0;
  3125     052C  1283               	bcf	3,5	;RP0=0, select bank0
  3126     052D  1303               	bcf	3,6	;RP1=0, select bank0
  3127     052E  1207               	bcf	7,4	;volatile
  3128                           
  3129                           ;lcd.c: 150:     TRISC |= ~(0xF0);
  3130     052F  300F               	movlw	15
  3131     0530  1683               	bsf	3,5	;RP0=1, select bank1
  3132     0531  1303               	bcf	3,6	;RP1=0, select bank1
  3133     0532  0487               	iorwf	7,f	;volatile
  3134     0533                     l1608:
  3135                           
  3136                           ;lcd.c: 151:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3137     0533  3021               	movlw	33
  3138     0534  00F3               	movwf	??_LCDGotoXY
  3139     0535                     u2017:
  3140     0535  0BF3               	decfsz	??_LCDGotoXY,f
  3141     0536  2D35               	goto	u2017
  3142     0537                     l201:
  3143     0537  0008               	return
  3144     0538                     __end_of_LCDGotoXY:
  3145                           
  3146                           	psect	text14
  3147     0499                     __ptext14:	
  3148 ;; *************** function _task2 *****************
  3149 ;; Defined at:
  3150 ;;		line 86 in file "main.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  res             2    2[BANK0 ] unsigned short 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3164 ;;      Params:         0       0       0       0       0
  3165 ;;      Locals:         0       2       0       0       0
  3166 ;;      Temps:          0       2       0       0       0
  3167 ;;      Totals:         0       4       0       0       0
  3168 ;;Total ram usage:        4 bytes
  3169 ;; Hardware stack levels used: 1
  3170 ;; Hardware stack levels required when called: 2
  3171 ;; This function calls:
  3172 ;;		___lwdiv
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178     0499                     _task2:	
  3179                           ;psect for function _task2
  3180                           
  3181     0499                     l2036:	
  3182                           ;incstack = 0
  3183                           ; Regs used in _task2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3184                           
  3185                           
  3186                           ;main.c: 88:     static uint16_t cnt = 0;;main.c: 89:     static uint8_t state = 0;;main
      +                          .c: 90:     uint16_t res;;main.c: 91:     switch(state)
  3187     0499  2CDF               	goto	l2058
  3188     049A                     l104:	
  3189                           ;main.c: 92:     {;main.c: 93:         case 0:
  3190                           
  3191                           
  3192                           ;main.c: 94:             ADCON0bits.GO = 1;
  3193     049A  149F               	bsf	31,1	;volatile
  3194     049B                     l2038:
  3195                           
  3196                           ;main.c: 95:             state++;
  3197     049B  3001               	movlw	1
  3198     049C  07D4               	addwf	task2@state,f
  3199                           
  3200                           ;main.c: 96:             break;
  3201     049D  2CEC               	goto	l109
  3202     049E                     l2040:
  3203                           
  3204                           ;main.c: 98:             res = ADRESL;
  3205     049E  1683               	bsf	3,5	;RP0=1, select bank1
  3206     049F  1303               	bcf	3,6	;RP1=0, select bank1
  3207     04A0  081E               	movf	30,w	;volatile
  3208     04A1  1283               	bcf	3,5	;RP0=0, select bank0
  3209     04A2  1303               	bcf	3,6	;RP1=0, select bank0
  3210     04A3  00D6               	movwf	??_task2
  3211     04A4  01D7               	clrf	??_task2+1
  3212     04A5  0856               	movf	??_task2,w
  3213     04A6  00D8               	movwf	task2@res
  3214     04A7  0857               	movf	??_task2+1,w
  3215     04A8  00D9               	movwf	task2@res+1
  3216     04A9                     l2042:
  3217                           
  3218                           ;main.c: 99:             res |= (uint16_t) (ADRESH << 8);
  3219     04A9  081E               	movf	30,w	;volatile
  3220     04AA  00D6               	movwf	??_task2
  3221     04AB  01D7               	clrf	??_task2+1
  3222     04AC  0856               	movf	??_task2,w
  3223     04AD  00D7               	movwf	??_task2+1
  3224     04AE  01D6               	clrf	??_task2
  3225     04AF  0856               	movf	??_task2,w
  3226     04B0  04D8               	iorwf	task2@res,f
  3227     04B1  0857               	movf	??_task2+1,w
  3228     04B2  04D9               	iorwf	task2@res+1,f
  3229     04B3                     l2044:
  3230                           
  3231                           ;main.c: 100:             res >>= 6;
  3232     04B3  3006               	movlw	6
  3233     04B4                     u1795:
  3234     04B4  1003               	clrc
  3235     04B5  0CD9               	rrf	task2@res+1,f
  3236     04B6  0CD8               	rrf	task2@res,f
  3237     04B7  3EFF               	addlw	-1
  3238     04B8  1D03               	skipz
  3239     04B9  2CB4               	goto	u1795
  3240     04BA  2C9B               	goto	l2038
  3241     04BB                     l2048:
  3242                           
  3243                           ;main.c: 104:             cnt++;
  3244     04BB  3001               	movlw	1
  3245     04BC  07CB               	addwf	task2@cnt,f
  3246     04BD  1803               	skipnc
  3247     04BE  0ACC               	incf	task2@cnt+1,f
  3248     04BF  3000               	movlw	0
  3249     04C0  07CC               	addwf	task2@cnt+1,f
  3250                           
  3251                           ;main.c: 105:             if(cnt > 499)
  3252     04C1  3001               	movlw	1
  3253     04C2  024C               	subwf	task2@cnt+1,w
  3254     04C3  30F4               	movlw	244
  3255     04C4  1903               	skipnz
  3256     04C5  024B               	subwf	task2@cnt,w
  3257     04C6  1C03               	skipc
  3258     04C7  2CC9               	goto	u1801
  3259     04C8  2CCA               	goto	u1800
  3260     04C9                     u1801:
  3261     04C9  2CEC               	goto	l109
  3262     04CA                     u1800:
  3263     04CA                     l2050:
  3264                           
  3265                           ;main.c: 106:             {;main.c: 107:                 cnt = 0;
  3266     04CA  01CB               	clrf	task2@cnt
  3267     04CB  01CC               	clrf	task2@cnt+1
  3268     04CC                     l2052:
  3269                           
  3270                           ;main.c: 108:                 adcres = (uint8_t) (res / 10);
  3271     04CC  300A               	movlw	10
  3272     04CD  00F2               	movwf	___lwdiv@divisor
  3273     04CE  3000               	movlw	0
  3274     04CF  00F3               	movwf	___lwdiv@divisor+1
  3275     04D0  0859               	movf	task2@res+1,w
  3276     04D1  00F5               	movwf	___lwdiv@dividend+1
  3277     04D2  0858               	movf	task2@res,w
  3278     04D3  00F4               	movwf	___lwdiv@dividend
  3279     04D4  120A  118A  2538  120A  118A  	fcall	___lwdiv
  3280     04D9  0872               	movf	?___lwdiv,w
  3281     04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3282     04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3283     04DC  00D5               	movwf	_adcres
  3284     04DD                     l2054:
  3285                           
  3286                           ;main.c: 109:                 state = 0;
  3287     04DD  01D4               	clrf	task2@state
  3288     04DE  2CEC               	goto	l109
  3289     04DF                     l2058:
  3290     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3291     04E0  1303               	bcf	3,6	;RP1=0, select bank0
  3292     04E1  0854               	movf	task2@state,w
  3293                           
  3294                           ; Switch size 1, requested type "simple"
  3295                           ; Number of cases is 3, Range of values is 0 to 2
  3296                           ; switch strategies available:
  3297                           ; Name         Instructions Cycles
  3298                           ; simple_byte           10     6 (average)
  3299                           ; direct_byte           17     8 (fixed)
  3300                           ; jumptable            260     6 (fixed)
  3301                           ;	Chosen strategy is simple_byte
  3302     04E2  3A00               	xorlw	0	; case 0
  3303     04E3  1903               	skipnz
  3304     04E4  2C9A               	goto	l104
  3305     04E5  3A01               	xorlw	1	; case 1
  3306     04E6  1903               	skipnz
  3307     04E7  2C9E               	goto	l2040
  3308     04E8  3A03               	xorlw	3	; case 2
  3309     04E9  1903               	skipnz
  3310     04EA  2CBB               	goto	l2048
  3311     04EB  2CEC               	goto	l109
  3312     04EC                     l109:
  3313     04EC  0008               	return
  3314     04ED                     __end_of_task2:
  3315                           
  3316                           	psect	text15
  3317     0538                     __ptext15:	
  3318 ;; *************** function ___lwdiv *****************
  3319 ;; Defined at:
  3320 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/lwdiv.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  divisor         2    2[COMMON] unsigned int 
  3323 ;;  dividend        2    4[COMMON] unsigned int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  quotient        2    6[COMMON] unsigned int 
  3326 ;;  counter         1    8[COMMON] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  2    2[COMMON] unsigned int 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3336 ;;      Params:         4       0       0       0       0
  3337 ;;      Locals:         3       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0
  3339 ;;      Totals:         7       0       0       0       0
  3340 ;;Total ram usage:        7 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_task2
  3347 ;;		_vfpfcnvrt
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351     0538                     ___lwdiv:	
  3352                           ;psect for function ___lwdiv
  3353                           
  3354     0538                     l1404:	
  3355                           ;incstack = 0
  3356                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3357                           
  3358     0538  01F6               	clrf	___lwdiv@quotient
  3359     0539  01F7               	clrf	___lwdiv@quotient+1
  3360     053A                     l1406:
  3361     053A  0872               	movf	___lwdiv@divisor,w
  3362     053B  0473               	iorwf	___lwdiv@divisor+1,w
  3363     053C  1903               	btfsc	3,2
  3364     053D  2D3F               	goto	u801
  3365     053E  2D40               	goto	u800
  3366     053F                     u801:
  3367     053F  2D75               	goto	l1426
  3368     0540                     u800:
  3369     0540                     l1408:
  3370     0540  3001               	movlw	1
  3371     0541  00F8               	movwf	___lwdiv@counter
  3372     0542  2D4C               	goto	l1414
  3373     0543                     l1410:
  3374     0543  3001               	movlw	1
  3375     0544                     u815:
  3376     0544  1003               	clrc
  3377     0545  0DF2               	rlf	___lwdiv@divisor,f
  3378     0546  0DF3               	rlf	___lwdiv@divisor+1,f
  3379     0547  3EFF               	addlw	-1
  3380     0548  1D03               	skipz
  3381     0549  2D44               	goto	u815
  3382     054A                     l1412:
  3383     054A  3001               	movlw	1
  3384     054B  07F8               	addwf	___lwdiv@counter,f
  3385     054C                     l1414:
  3386     054C  1FF3               	btfss	___lwdiv@divisor+1,7
  3387     054D  2D4F               	goto	u821
  3388     054E  2D50               	goto	u820
  3389     054F                     u821:
  3390     054F  2D43               	goto	l1410
  3391     0550                     u820:
  3392     0550                     l1416:
  3393     0550  3001               	movlw	1
  3394     0551                     u835:
  3395     0551  1003               	clrc
  3396     0552  0DF6               	rlf	___lwdiv@quotient,f
  3397     0553  0DF7               	rlf	___lwdiv@quotient+1,f
  3398     0554  3EFF               	addlw	-1
  3399     0555  1D03               	skipz
  3400     0556  2D51               	goto	u835
  3401     0557  0873               	movf	___lwdiv@divisor+1,w
  3402     0558  0275               	subwf	___lwdiv@dividend+1,w
  3403     0559  1D03               	skipz
  3404     055A  2D5D               	goto	u845
  3405     055B  0872               	movf	___lwdiv@divisor,w
  3406     055C  0274               	subwf	___lwdiv@dividend,w
  3407     055D                     u845:
  3408     055D  1C03               	skipc
  3409     055E  2D60               	goto	u841
  3410     055F  2D61               	goto	u840
  3411     0560                     u841:
  3412     0560  2D68               	goto	l1422
  3413     0561                     u840:
  3414     0561                     l1418:
  3415     0561  0872               	movf	___lwdiv@divisor,w
  3416     0562  02F4               	subwf	___lwdiv@dividend,f
  3417     0563  0873               	movf	___lwdiv@divisor+1,w
  3418     0564  1C03               	skipc
  3419     0565  03F5               	decf	___lwdiv@dividend+1,f
  3420     0566  02F5               	subwf	___lwdiv@dividend+1,f
  3421     0567                     l1420:
  3422     0567  1476               	bsf	___lwdiv@quotient,0
  3423     0568                     l1422:
  3424     0568  3001               	movlw	1
  3425     0569                     u855:
  3426     0569  1003               	clrc
  3427     056A  0CF3               	rrf	___lwdiv@divisor+1,f
  3428     056B  0CF2               	rrf	___lwdiv@divisor,f
  3429     056C  3EFF               	addlw	-1
  3430     056D  1D03               	skipz
  3431     056E  2D69               	goto	u855
  3432     056F                     l1424:
  3433     056F  3001               	movlw	1
  3434     0570  02F8               	subwf	___lwdiv@counter,f
  3435     0571  1D03               	btfss	3,2
  3436     0572  2D74               	goto	u861
  3437     0573  2D75               	goto	u860
  3438     0574                     u861:
  3439     0574  2D50               	goto	l1416
  3440     0575                     u860:
  3441     0575                     l1426:
  3442     0575  0877               	movf	___lwdiv@quotient+1,w
  3443     0576  00F3               	movwf	?___lwdiv+1
  3444     0577  0876               	movf	___lwdiv@quotient,w
  3445     0578  00F2               	movwf	?___lwdiv
  3446     0579                     l585:
  3447     0579  0008               	return
  3448     057A                     __end_of___lwdiv:
  3449                           
  3450                           	psect	text16
  3451     06D5                     __ptext16:	
  3452 ;; *************** function _task1 *****************
  3453 ;; Defined at:
  3454 ;;		line 75 in file "main.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3468 ;;      Params:         0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0
  3471 ;;      Totals:         0       0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 1
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482     06D5                     _task1:	
  3483                           ;psect for function _task1
  3484                           
  3485     06D5                     l1750:	
  3486                           ;incstack = 0
  3487                           ; Regs used in _task1: [wreg+status,2+status,0]
  3488                           
  3489                           
  3490                           ;main.c: 77:     static uint16_t cnt = 0;;main.c: 78:     cnt++;
  3491     06D5  3001               	movlw	1
  3492     06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3493     06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3494     06D8  07CD               	addwf	task1@cnt,f
  3495     06D9  1803               	skipnc
  3496     06DA  0ACE               	incf	task1@cnt+1,f
  3497     06DB  3000               	movlw	0
  3498     06DC  07CE               	addwf	task1@cnt+1,f
  3499     06DD                     l1752:
  3500                           
  3501                           ;main.c: 79:     if(cnt == 100) PORTEbits.RE2 = 0;
  3502     06DD  3064               	movlw	100
  3503     06DE  064D               	xorwf	task1@cnt,w
  3504     06DF  044E               	iorwf	task1@cnt+1,w
  3505     06E0  1D03               	btfss	3,2
  3506     06E1  2EE3               	goto	u1321
  3507     06E2  2EE4               	goto	u1320
  3508     06E3                     u1321:
  3509     06E3  2EE5               	goto	l1756
  3510     06E4                     u1320:
  3511     06E4                     l1754:
  3512     06E4  1109               	bcf	9,2	;volatile
  3513     06E5                     l1756:
  3514                           
  3515                           ;main.c: 80:     if(cnt == 1000)
  3516     06E5  30E8               	movlw	232
  3517     06E6  064D               	xorwf	task1@cnt,w
  3518     06E7  3003               	movlw	3
  3519     06E8  1903               	skipnz
  3520     06E9  064E               	xorwf	task1@cnt+1,w
  3521     06EA  1D03               	btfss	3,2
  3522     06EB  2EED               	goto	u1331
  3523     06EC  2EEE               	goto	u1330
  3524     06ED                     u1331:
  3525     06ED  2EF1               	goto	l96
  3526     06EE                     u1330:
  3527     06EE                     l1758:
  3528                           
  3529                           ;main.c: 81:     {;main.c: 82:         PORTEbits.RE2 = 1;
  3530     06EE  1509               	bsf	9,2	;volatile
  3531     06EF                     l1760:
  3532                           
  3533                           ;main.c: 83:         cnt = 0;
  3534     06EF  01CD               	clrf	task1@cnt
  3535     06F0  01CE               	clrf	task1@cnt+1
  3536     06F1                     l96:
  3537     06F1  0008               	return
  3538     06F2                     __end_of_task1:
  3539                           
  3540                           	psect	text17
  3541     05F0                     __ptext17:	
  3542 ;; *************** function _setup *****************
  3543 ;; Defined at:
  3544 ;;		line 45 in file "main.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3558 ;;      Params:         0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0
  3561 ;;      Totals:         0       0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used: 1
  3564 ;; Hardware stack levels required when called: 1
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572     05F0                     _setup:	
  3573                           ;psect for function _setup
  3574                           
  3575     05F0                     l1118:	
  3576                           ;incstack = 0
  3577                           ; Regs used in _setup: [wreg+status,2+status,0]
  3578                           
  3579                           
  3580                           ;main.c: 47:     OSCCONbits.IRCF = 0b111;
  3581     05F0  3070               	movlw	112
  3582     05F1  1683               	bsf	3,5	;RP0=1, select bank1
  3583     05F2  1303               	bcf	3,6	;RP1=0, select bank1
  3584     05F3  048F               	iorwf	15,f	;volatile
  3585     05F4                     l1120:
  3586                           
  3587                           ;main.c: 48:     ANSEL = 0;
  3588     05F4  1683               	bsf	3,5	;RP0=1, select bank3
  3589     05F5  1703               	bsf	3,6	;RP1=1, select bank3
  3590     05F6  0188               	clrf	8	;volatile
  3591     05F7                     l1122:
  3592                           
  3593                           ;main.c: 49:     ANSELH = 0;
  3594     05F7  0189               	clrf	9	;volatile
  3595     05F8                     l1124:
  3596                           
  3597                           ;main.c: 50:     nRBPU = 0;
  3598     05F8  1683               	bsf	3,5	;RP0=1, select bank1
  3599     05F9  1303               	bcf	3,6	;RP1=0, select bank1
  3600     05FA  1381               	bcf	1,7	;volatile
  3601     05FB                     l1126:
  3602                           
  3603                           ;main.c: 51:     TRISBbits.TRISB3 = 0;
  3604     05FB  1186               	bcf	6,3	;volatile
  3605     05FC                     l1128:
  3606                           
  3607                           ;main.c: 52:     PORTBbits.RB3 = 0;
  3608     05FC  1283               	bcf	3,5	;RP0=0, select bank0
  3609     05FD  1303               	bcf	3,6	;RP1=0, select bank0
  3610     05FE  1186               	bcf	6,3	;volatile
  3611     05FF                     l1130:
  3612                           
  3613                           ;main.c: 53:     TRISEbits.TRISE2 = 0;
  3614     05FF  1683               	bsf	3,5	;RP0=1, select bank1
  3615     0600  1303               	bcf	3,6	;RP1=0, select bank1
  3616     0601  1109               	bcf	9,2	;volatile
  3617     0602                     l1132:
  3618                           
  3619                           ;main.c: 56:     TXSTAbits.BRGH = 1;
  3620     0602  1518               	bsf	24,2	;volatile
  3621     0603                     l1134:
  3622                           
  3623                           ;main.c: 57:     TXSTAbits.TXEN = 1;
  3624     0603  1698               	bsf	24,5	;volatile
  3625     0604                     l1136:
  3626                           
  3627                           ;main.c: 58:     RCSTAbits.SPEN = 1;
  3628     0604  1283               	bcf	3,5	;RP0=0, select bank0
  3629     0605  1303               	bcf	3,6	;RP1=0, select bank0
  3630     0606  1798               	bsf	24,7	;volatile
  3631     0607                     l1138:
  3632                           
  3633                           ;main.c: 59:     SPBRG = 51;
  3634     0607  3033               	movlw	51
  3635     0608  1683               	bsf	3,5	;RP0=1, select bank1
  3636     0609  1303               	bcf	3,6	;RP1=0, select bank1
  3637     060A  0099               	movwf	25	;volatile
  3638     060B                     l1140:
  3639                           
  3640                           ;main.c: 61:     ANSELbits.ANS0 = 1;
  3641     060B  1683               	bsf	3,5	;RP0=1, select bank3
  3642     060C  1703               	bsf	3,6	;RP1=1, select bank3
  3643     060D  1408               	bsf	8,0	;volatile
  3644                           
  3645                           ;main.c: 62:     ADCON0bits.ADCS = 0b10;
  3646     060E  1283               	bcf	3,5	;RP0=0, select bank0
  3647     060F  1303               	bcf	3,6	;RP1=0, select bank0
  3648     0610  081F               	movf	31,w	;volatile
  3649     0611  393F               	andlw	-193
  3650     0612  3880               	iorlw	128
  3651     0613  009F               	movwf	31	;volatile
  3652                           
  3653                           ;main.c: 63:     ADCON0bits.CHS = 0;
  3654     0614  30C3               	movlw	-61
  3655     0615  059F               	andwf	31,f	;volatile
  3656     0616                     l1142:
  3657                           
  3658                           ;main.c: 64:     ADCON0bits.ADON = 1;
  3659     0616  141F               	bsf	31,0	;volatile
  3660     0617                     l1144:
  3661                           
  3662                           ;main.c: 66:     OPTION_REGbits.T0CS = 0;
  3663     0617  1683               	bsf	3,5	;RP0=1, select bank1
  3664     0618  1303               	bcf	3,6	;RP1=0, select bank1
  3665     0619  1281               	bcf	1,5	;volatile
  3666     061A                     l1146:
  3667                           
  3668                           ;main.c: 67:     OPTION_REGbits.PSA = 0;
  3669     061A  1181               	bcf	1,3	;volatile
  3670                           
  3671                           ;main.c: 68:     OPTION_REGbits.PS = 0b011;
  3672     061B  0801               	movf	1,w	;volatile
  3673     061C  39F8               	andlw	-8
  3674     061D  3803               	iorlw	3
  3675     061E  0081               	movwf	1	;volatile
  3676     061F                     l1148:
  3677                           
  3678                           ;main.c: 69:     TMR0 = 131;
  3679     061F  3083               	movlw	131
  3680     0620  1283               	bcf	3,5	;RP0=0, select bank0
  3681     0621  1303               	bcf	3,6	;RP1=0, select bank0
  3682     0622  0081               	movwf	1	;volatile
  3683     0623                     l1150:
  3684                           
  3685                           ;main.c: 70:     INTCONbits.T0IF = 0;
  3686     0623  110B               	bcf	11,2	;volatile
  3687     0624                     l1152:
  3688                           
  3689                           ;main.c: 71:     INTCONbits.T0IE = 1;
  3690     0624  168B               	bsf	11,5	;volatile
  3691     0625                     l1154:
  3692                           
  3693                           ;main.c: 73:     INTCONbits.GIE = 1;
  3694     0625  178B               	bsf	11,7	;volatile
  3695     0626                     l89:
  3696     0626  0008               	return
  3697     0627                     __end_of_setup:
  3698                           
  3699                           	psect	text18
  3700     02C9                     __ptext18:	
  3701 ;; *************** function _LCDSetup *****************
  3702 ;; Defined at:
  3703 ;;		line 185 in file "lcd.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;		None
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  n               1    7[COMMON] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0, pclath, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3717 ;;      Params:         0       0       0       0       0
  3718 ;;      Locals:         1       0       0       0       0
  3719 ;;      Temps:          2       0       0       0       0
  3720 ;;      Totals:         3       0       0       0       0
  3721 ;;Total ram usage:        3 bytes
  3722 ;; Hardware stack levels used: 1
  3723 ;; Hardware stack levels required when called: 2
  3724 ;; This function calls:
  3725 ;;		_LCDWriteCMD
  3726 ;; This function is called by:
  3727 ;;		_main
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731     02C9                     _LCDSetup:	
  3732                           ;psect for function _LCDSetup
  3733                           
  3734     02C9                     l1684:	
  3735                           ;incstack = 0
  3736                           ; Regs used in _LCDSetup: [wreg+status,2+status,0+pclath+cstack]
  3737                           
  3738                           
  3739                           ;lcd.c: 187:     uint8_t n = 10;
  3740     02C9  300A               	movlw	10
  3741     02CA  00F7               	movwf	LCDSetup@n
  3742                           
  3743                           ;lcd.c: 188:     TRISCbits.TRISC4 = 0;
  3744     02CB  1683               	bsf	3,5	;RP0=1, select bank1
  3745     02CC  1303               	bcf	3,6	;RP1=0, select bank1
  3746     02CD  1207               	bcf	7,4	;volatile
  3747                           
  3748                           ;lcd.c: 189:     TRISCbits.TRISC5 = 0;
  3749     02CE  1287               	bcf	7,5	;volatile
  3750                           
  3751                           ;lcd.c: 190:     PORTCbits.RC5 = 0;
  3752     02CF  1283               	bcf	3,5	;RP0=0, select bank0
  3753     02D0  1303               	bcf	3,6	;RP1=0, select bank0
  3754     02D1  1287               	bcf	7,5	;volatile
  3755                           
  3756                           ;lcd.c: 191:     PORTCbits.RC4 = 0;
  3757     02D2  1207               	bcf	7,4	;volatile
  3758                           
  3759                           ;lcd.c: 192:     while(n--) _delay((unsigned long)((2000)*(8000000/4000000.0)));
  3760     02D3  2ADD               	goto	l1688
  3761     02D4                     l1686:
  3762     02D4  3006               	movlw	6
  3763     02D5  00F6               	movwf	??_LCDSetup+1
  3764     02D6  3030               	movlw	48
  3765     02D7  00F5               	movwf	??_LCDSetup
  3766     02D8                     u2027:
  3767     02D8  0BF5               	decfsz	??_LCDSetup,f
  3768     02D9  2AD8               	goto	u2027
  3769     02DA  0BF6               	decfsz	??_LCDSetup+1,f
  3770     02DB  2AD8               	goto	u2027
  3771     02DC  0000               	nop
  3772     02DD                     l1688:
  3773     02DD  3001               	movlw	1
  3774     02DE  02F7               	subwf	LCDSetup@n,f
  3775     02DF  0A77               	incf	LCDSetup@n,w
  3776     02E0  1D03               	btfss	3,2
  3777     02E1  2AE3               	goto	u1311
  3778     02E2  2AE4               	goto	u1310
  3779     02E3                     u1311:
  3780     02E3  2AD4               	goto	l1686
  3781     02E4                     u1310:
  3782     02E4                     l1690:
  3783                           
  3784                           ;lcd.c: 193:     TRISC &= 0xF0;
  3785     02E4  30F0               	movlw	240
  3786     02E5  1683               	bsf	3,5	;RP0=1, select bank1
  3787     02E6  1303               	bcf	3,6	;RP1=0, select bank1
  3788     02E7  0587               	andwf	7,f	;volatile
  3789                           
  3790                           ;lcd.c: 194:     PORTC &= 0xF0;
  3791     02E8  30F0               	movlw	240
  3792     02E9  1283               	bcf	3,5	;RP0=0, select bank0
  3793     02EA  1303               	bcf	3,6	;RP1=0, select bank0
  3794     02EB  0587               	andwf	7,f	;volatile
  3795                           
  3796                           ;lcd.c: 198:     PORTC |= 0b00000011;
  3797     02EC  3003               	movlw	3
  3798     02ED  0487               	iorwf	7,f	;volatile
  3799     02EE                     l1692:
  3800                           
  3801                           ;lcd.c: 200:     PORTCbits.RC4 = 1;
  3802     02EE  1607               	bsf	7,4	;volatile
  3803     02EF                     l1694:
  3804                           
  3805                           ;lcd.c: 201:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3806     02EF  2AF0               	nop2	;2 cycle nop
  3807     02F0                     l1696:
  3808                           
  3809                           ;lcd.c: 202:     PORTCbits.RC4 = 0;
  3810     02F0  1283               	bcf	3,5	;RP0=0, select bank0
  3811     02F1  1303               	bcf	3,6	;RP1=0, select bank0
  3812     02F2  1207               	bcf	7,4	;volatile
  3813     02F3                     l1698:
  3814                           
  3815                           ;lcd.c: 203:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  3816     02F3  3006               	movlw	6
  3817     02F4  00F6               	movwf	??_LCDSetup+1
  3818     02F5  3030               	movlw	48
  3819     02F6  00F5               	movwf	??_LCDSetup
  3820     02F7                     u2037:
  3821     02F7  0BF5               	decfsz	??_LCDSetup,f
  3822     02F8  2AF7               	goto	u2037
  3823     02F9  0BF6               	decfsz	??_LCDSetup+1,f
  3824     02FA  2AF7               	goto	u2037
  3825     02FB  0000               	nop
  3826     02FC                     l1700:
  3827                           
  3828                           ;lcd.c: 204:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  3829     02FC  3006               	movlw	6
  3830     02FD  00F6               	movwf	??_LCDSetup+1
  3831     02FE  3030               	movlw	48
  3832     02FF  00F5               	movwf	??_LCDSetup
  3833     0300                     u2047:
  3834     0300  0BF5               	decfsz	??_LCDSetup,f
  3835     0301  2B00               	goto	u2047
  3836     0302  0BF6               	decfsz	??_LCDSetup+1,f
  3837     0303  2B00               	goto	u2047
  3838     0304  0000               	nop
  3839     0305                     l1702:
  3840                           
  3841                           ;lcd.c: 205:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  3842     0305  3006               	movlw	6
  3843     0306  00F6               	movwf	??_LCDSetup+1
  3844     0307  3030               	movlw	48
  3845     0308  00F5               	movwf	??_LCDSetup
  3846     0309                     u2057:
  3847     0309  0BF5               	decfsz	??_LCDSetup,f
  3848     030A  2B09               	goto	u2057
  3849     030B  0BF6               	decfsz	??_LCDSetup+1,f
  3850     030C  2B09               	goto	u2057
  3851     030D  0000               	nop
  3852     030E                     l1704:
  3853                           
  3854                           ;lcd.c: 206:     PORTC &= 0xF0;
  3855     030E  30F0               	movlw	240
  3856     030F  1283               	bcf	3,5	;RP0=0, select bank0
  3857     0310  1303               	bcf	3,6	;RP1=0, select bank0
  3858     0311  0587               	andwf	7,f	;volatile
  3859     0312                     l1706:
  3860                           
  3861                           ;lcd.c: 210:     PORTC |= 0b00000011;
  3862     0312  3003               	movlw	3
  3863     0313  0487               	iorwf	7,f	;volatile
  3864     0314                     l1708:
  3865                           
  3866                           ;lcd.c: 212:     PORTCbits.RC4 = 1;
  3867     0314  1607               	bsf	7,4	;volatile
  3868     0315                     l1710:
  3869                           
  3870                           ;lcd.c: 213:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3871     0315  2B16               	nop2	;2 cycle nop
  3872     0316                     l1712:
  3873                           
  3874                           ;lcd.c: 214:     PORTCbits.RC4 = 0;
  3875     0316  1283               	bcf	3,5	;RP0=0, select bank0
  3876     0317  1303               	bcf	3,6	;RP1=0, select bank0
  3877     0318  1207               	bcf	7,4	;volatile
  3878     0319                     l1714:
  3879                           
  3880                           ;lcd.c: 215:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3881     0319  3021               	movlw	33
  3882     031A  00F5               	movwf	??_LCDSetup
  3883     031B                     u2067:
  3884     031B  0BF5               	decfsz	??_LCDSetup,f
  3885     031C  2B1B               	goto	u2067
  3886     031D                     l1716:
  3887                           
  3888                           ;lcd.c: 216:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3889     031D  3021               	movlw	33
  3890     031E  00F5               	movwf	??_LCDSetup
  3891     031F                     u2077:
  3892     031F  0BF5               	decfsz	??_LCDSetup,f
  3893     0320  2B1F               	goto	u2077
  3894     0321                     l1718:
  3895                           
  3896                           ;lcd.c: 217:     PORTC &= 0xF0;
  3897     0321  30F0               	movlw	240
  3898     0322  1283               	bcf	3,5	;RP0=0, select bank0
  3899     0323  1303               	bcf	3,6	;RP1=0, select bank0
  3900     0324  0587               	andwf	7,f	;volatile
  3901     0325                     l1720:
  3902                           
  3903                           ;lcd.c: 221:     PORTC |= 0b00000011;
  3904     0325  3003               	movlw	3
  3905     0326  0487               	iorwf	7,f	;volatile
  3906     0327                     l1722:
  3907                           
  3908                           ;lcd.c: 223:     PORTCbits.RC4 = 1;
  3909     0327  1607               	bsf	7,4	;volatile
  3910     0328                     l1724:
  3911                           
  3912                           ;lcd.c: 224:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3913     0328  2B29               	nop2	;2 cycle nop
  3914     0329                     l1726:
  3915                           
  3916                           ;lcd.c: 225:     PORTCbits.RC4 = 0;
  3917     0329  1283               	bcf	3,5	;RP0=0, select bank0
  3918     032A  1303               	bcf	3,6	;RP1=0, select bank0
  3919     032B  1207               	bcf	7,4	;volatile
  3920     032C                     l1728:
  3921                           
  3922                           ;lcd.c: 226:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3923     032C  3021               	movlw	33
  3924     032D  00F5               	movwf	??_LCDSetup
  3925     032E                     u2087:
  3926     032E  0BF5               	decfsz	??_LCDSetup,f
  3927     032F  2B2E               	goto	u2087
  3928                           
  3929                           ;lcd.c: 228:     PORTC &= 0xF0;
  3930     0330  30F0               	movlw	240
  3931     0331  1283               	bcf	3,5	;RP0=0, select bank0
  3932     0332  1303               	bcf	3,6	;RP1=0, select bank0
  3933     0333  0587               	andwf	7,f	;volatile
  3934     0334                     l1730:
  3935                           
  3936                           ;lcd.c: 232:     PORTC |= 0b00000010;
  3937     0334  1487               	bsf	7,1	;volatile
  3938     0335                     l1732:
  3939                           
  3940                           ;lcd.c: 234:     PORTCbits.RC4 = 1;
  3941     0335  1607               	bsf	7,4	;volatile
  3942     0336                     l1734:
  3943                           
  3944                           ;lcd.c: 235:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3945     0336  2B37               	nop2	;2 cycle nop
  3946     0337                     l1736:
  3947                           
  3948                           ;lcd.c: 236:     PORTCbits.RC4 = 0;
  3949     0337  1283               	bcf	3,5	;RP0=0, select bank0
  3950     0338  1303               	bcf	3,6	;RP1=0, select bank0
  3951     0339  1207               	bcf	7,4	;volatile
  3952     033A                     l1738:
  3953                           
  3954                           ;lcd.c: 237:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3955     033A  3021               	movlw	33
  3956     033B  00F5               	movwf	??_LCDSetup
  3957     033C                     u2097:
  3958     033C  0BF5               	decfsz	??_LCDSetup,f
  3959     033D  2B3C               	goto	u2097
  3960     033E                     l1740:
  3961                           
  3962                           ;lcd.c: 239:     LCDWriteCMD(0x3F & 0x2F);
  3963     033E  302F               	movlw	47
  3964     033F  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  3965     0344                     l1742:
  3966                           
  3967                           ;lcd.c: 240:     LCDWriteCMD(0x0F & 0x0E & 0x0D);
  3968     0344  300C               	movlw	12
  3969     0345  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  3970     034A                     l1744:
  3971                           
  3972                           ;lcd.c: 241:     LCDWriteCMD(0x07 & 0x06);
  3973     034A  3006               	movlw	6
  3974     034B  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  3975     0350                     l1746:
  3976                           
  3977                           ;lcd.c: 242:     LCDWriteCMD(0x01);
  3978     0350  3001               	movlw	1
  3979     0351  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  3980     0356                     l1748:
  3981                           
  3982                           ;lcd.c: 243:     LCDWriteCMD(0x02);
  3983     0356  3002               	movlw	2
  3984     0357  120A  118A  257A  120A  118A  	fcall	_LCDWriteCMD
  3985     035C                     l219:
  3986     035C  0008               	return
  3987     035D                     __end_of_LCDSetup:
  3988                           
  3989                           	psect	text19
  3990     057A                     __ptext19:	
  3991 ;; *************** function _LCDWriteCMD *****************
  3992 ;; Defined at:
  3993 ;;		line 88 in file "lcd.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  cmd             1    wreg     unsigned char 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  cmd             1    4[COMMON] unsigned char 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4007 ;;      Params:         0       0       0       0       0
  4008 ;;      Locals:         1       0       0       0       0
  4009 ;;      Temps:          2       0       0       0       0
  4010 ;;      Totals:         3       0       0       0       0
  4011 ;;Total ram usage:        3 bytes
  4012 ;; Hardware stack levels used: 1
  4013 ;; Hardware stack levels required when called: 1
  4014 ;; This function calls:
  4015 ;;		Nothing
  4016 ;; This function is called by:
  4017 ;;		_task4
  4018 ;;		_LCDSetup
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022     057A                     _LCDWriteCMD:	
  4023                           ;psect for function _LCDWriteCMD
  4024                           
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _LCDWriteCMD: [wreg+status,2+status,0]
  4028                           ;LCDWriteCMD@cmd stored from wreg
  4029     057A  00F4               	movwf	LCDWriteCMD@cmd
  4030     057B                     l1662:
  4031                           
  4032                           ;lcd.c: 88: void LCDWriteCMD(uint8_t cmd);lcd.c: 89: {;lcd.c: 90:     PORTCbits.RC5 = 0;
  4033     057B  1283               	bcf	3,5	;RP0=0, select bank0
  4034     057C  1303               	bcf	3,6	;RP1=0, select bank0
  4035     057D  1287               	bcf	7,5	;volatile
  4036     057E                     l1664:
  4037                           
  4038                           ;lcd.c: 91:     TRISC &= 0xF0;
  4039     057E  30F0               	movlw	240
  4040     057F  1683               	bsf	3,5	;RP0=1, select bank1
  4041     0580  1303               	bcf	3,6	;RP1=0, select bank1
  4042     0581  0587               	andwf	7,f	;volatile
  4043                           
  4044                           ;lcd.c: 92:     PORTC &= 0xF0;
  4045     0582  30F0               	movlw	240
  4046     0583  1283               	bcf	3,5	;RP0=0, select bank0
  4047     0584  1303               	bcf	3,6	;RP1=0, select bank0
  4048     0585  0587               	andwf	7,f	;volatile
  4049                           
  4050                           ;lcd.c: 96:     PORTC |= (cmd >> 4);
  4051     0586  0874               	movf	LCDWriteCMD@cmd,w
  4052     0587  00F2               	movwf	??_LCDWriteCMD
  4053     0588  3004               	movlw	4
  4054     0589                     u1295:
  4055     0589  1003               	clrc
  4056     058A  0CF2               	rrf	??_LCDWriteCMD,f
  4057     058B  3EFF               	addlw	-1
  4058     058C  1D03               	skipz
  4059     058D  2D89               	goto	u1295
  4060     058E  0872               	movf	??_LCDWriteCMD,w
  4061     058F  0487               	iorwf	7,f	;volatile
  4062     0590                     l1666:
  4063                           
  4064                           ;lcd.c: 98:     PORTCbits.RC4 = 1;
  4065     0590  1607               	bsf	7,4	;volatile
  4066     0591                     l1668:
  4067                           
  4068                           ;lcd.c: 99:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4069     0591  2D92               	nop2	;2 cycle nop
  4070     0592                     l1670:
  4071                           
  4072                           ;lcd.c: 100:     PORTCbits.RC4 = 0;
  4073     0592  1283               	bcf	3,5	;RP0=0, select bank0
  4074     0593  1303               	bcf	3,6	;RP1=0, select bank0
  4075     0594  1207               	bcf	7,4	;volatile
  4076                           
  4077                           ;lcd.c: 101:     PORTC &= 0xF0;
  4078     0595  30F0               	movlw	240
  4079     0596  0587               	andwf	7,f	;volatile
  4080                           
  4081                           ;lcd.c: 105:     PORTC |= cmd & ~(0xF0);
  4082     0597  0874               	movf	LCDWriteCMD@cmd,w
  4083     0598  390F               	andlw	15
  4084     0599  0487               	iorwf	7,f	;volatile
  4085     059A                     l1672:
  4086                           
  4087                           ;lcd.c: 107:     PORTCbits.RC4 = 1;
  4088     059A  1607               	bsf	7,4	;volatile
  4089     059B                     l1674:
  4090                           
  4091                           ;lcd.c: 108:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4092     059B  2D9C               	nop2	;2 cycle nop
  4093     059C                     l1676:
  4094                           
  4095                           ;lcd.c: 109:     PORTCbits.RC4 = 0;
  4096     059C  1283               	bcf	3,5	;RP0=0, select bank0
  4097     059D  1303               	bcf	3,6	;RP1=0, select bank0
  4098     059E  1207               	bcf	7,4	;volatile
  4099                           
  4100                           ;lcd.c: 110:     TRISC |= ~0xF0;
  4101     059F  300F               	movlw	15
  4102     05A0  1683               	bsf	3,5	;RP0=1, select bank1
  4103     05A1  1303               	bcf	3,6	;RP1=0, select bank1
  4104     05A2  0487               	iorwf	7,f	;volatile
  4105     05A3                     l1678:
  4106                           
  4107                           ;lcd.c: 111:     if(cmd > 0x02) _delay((unsigned long)((50)*(8000000/4000000.0)));
  4108     05A3  3003               	movlw	3
  4109     05A4  0274               	subwf	LCDWriteCMD@cmd,w
  4110     05A5  1C03               	skipc
  4111     05A6  2DA8               	goto	u1301
  4112     05A7  2DA9               	goto	u1300
  4113     05A8                     u1301:
  4114     05A8  2DAE               	goto	l1682
  4115     05A9                     u1300:
  4116     05A9                     l1680:
  4117     05A9  3021               	movlw	33
  4118     05AA  00F2               	movwf	??_LCDWriteCMD
  4119     05AB                     u2107:
  4120     05AB  0BF2               	decfsz	??_LCDWriteCMD,f
  4121     05AC  2DAB               	goto	u2107
  4122     05AD  2DB7               	goto	l192
  4123     05AE                     l1682:
  4124     05AE  3006               	movlw	6
  4125     05AF  00F3               	movwf	??_LCDWriteCMD+1
  4126     05B0  3030               	movlw	48
  4127     05B1  00F2               	movwf	??_LCDWriteCMD
  4128     05B2                     u2117:
  4129     05B2  0BF2               	decfsz	??_LCDWriteCMD,f
  4130     05B3  2DB2               	goto	u2117
  4131     05B4  0BF3               	decfsz	??_LCDWriteCMD+1,f
  4132     05B5  2DB2               	goto	u2117
  4133     05B6  0000               	nop
  4134     05B7                     l192:
  4135     05B7  0008               	return
  4136     05B8                     __end_of_LCDWriteCMD:
  4137                           
  4138                           	psect	text20
  4139     070E                     __ptext20:	
  4140 ;; *************** function _isr *****************
  4141 ;; Defined at:
  4142 ;;		line 20 in file "main.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4156 ;;      Params:         0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0
  4158 ;;      Temps:          2       0       0       0       0
  4159 ;;      Totals:         2       0       0       0       0
  4160 ;;Total ram usage:        2 bytes
  4161 ;; Hardware stack levels used: 1
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		Interrupt level 1
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169     070E                     _isr:	
  4170                           ;psect for function _isr
  4171                           
  4172     070E                     i1l1370:
  4173                           
  4174                           ;main.c: 22:     if(INTCONbits.T0IF)
  4175     070E  1D0B               	btfss	11,2	;volatile
  4176     070F  2F11               	goto	u75_21
  4177     0710  2F12               	goto	u75_20
  4178     0711                     u75_21:
  4179     0711  2F18               	goto	i1l76
  4180     0712                     u75_20:
  4181     0712                     i1l1372:
  4182                           
  4183                           ;main.c: 23:      {;main.c: 24:         INTCONbits.T0IF = 0;
  4184     0712  110B               	bcf	11,2	;volatile
  4185     0713                     i1l1374:
  4186                           
  4187                           ;main.c: 25:         TMR0 += 131;
  4188     0713  3083               	movlw	131
  4189     0714  1283               	bcf	3,5	;RP0=0, select bank0
  4190     0715  1303               	bcf	3,6	;RP1=0, select bank0
  4191     0716  0781               	addwf	1,f	;volatile
  4192     0717                     i1l1376:
  4193                           
  4194                           ;main.c: 26:         tickms = 1;
  4195     0717  14FA               	bsf	_tickms/(0+8),_tickms& (0+7)	;volatile
  4196     0718                     i1l76:
  4197     0718  0871               	movf	??_isr+1,w
  4198     0719  008A               	movwf	10
  4199     071A  0E70               	swapf	??_isr,w
  4200     071B  0083               	movwf	3
  4201     071C  0EFE               	swapf	btemp,f
  4202     071D  0E7E               	swapf	btemp,w
  4203     071E  0009               	retfie
  4204     071F                     __end_of_isr:
  4205     0002                     ___latbits      equ	2
  4206     007E                     btemp           set	126	;btemp
  4207     007E                     wtemp0          set	126
  4208                           
  4209                           	psect	intentry
  4210     0004                     __pintentry:	
  4211                           ;incstack = 0
  4212                           ; Regs used in _isr: [wreg+status,2+status,0]
  4213                           
  4214     0004                     interrupt_function:
  4215     007E                     saved_w         set	btemp
  4216     0004  00FE               	movwf	btemp
  4217     0005  0E03               	swapf	3,w
  4218     0006  00F0               	movwf	??_isr
  4219     0007  080A               	movf	10,w
  4220     0008  00F1               	movwf	??_isr+1
  4221     0009  120A  118A  2F0E   	ljmp	_isr
  4222                           
  4223                           	psect	config
  4224                           
  4225                           ;Config register CONFIG1 @ 0x2007
  4226                           ;	Oscillator Selection bits
  4227                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4228                           ;	Watchdog Timer Enable bit
  4229                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4230                           ;	Power-up Timer Enable bit
  4231                           ;	PWRTE = 0x1, unprogrammed default
  4232                           ;	RE3/MCLR pin function select bit
  4233                           ;	MCLRE = 0x1, unprogrammed default
  4234                           ;	Code Protection bit
  4235                           ;	CP = 0x1, unprogrammed default
  4236                           ;	Data Code Protection bit
  4237                           ;	CPD = 0x1, unprogrammed default
  4238                           ;	Brown Out Reset Selection bits
  4239                           ;	BOREN = 0x3, unprogrammed default
  4240                           ;	Internal External Switchover bit
  4241                           ;	IESO = 0x1, unprogrammed default
  4242                           ;	Fail-Safe Clock Monitor Enabled bit
  4243                           ;	FCMEN = 0x1, unprogrammed default
  4244                           ;	Low Voltage Programming Enable bit
  4245                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4246                           ;	In-Circuit Debugger Mode bit
  4247                           ;	DEBUG = 0x1, unprogrammed default
  4248     2007                     	org	8199
  4249     2007  2FF4               	dw	12276

Data Sizes:
    Strings     44
    Constant    0
    Data        1
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     25      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    LCDWriteMsgROM@str	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_2(CODE[5]), STR_3(CODE[13]), STR_4(CODE[13]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    S1033$buffer	PTR unsigned char  size(1) Largest target is 0

    S1033$source	PTR const unsigned char  size(1) Largest target is 0

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _printf->_vfprintf
    _vfpfcnvrt->___lwdiv
    _fputc->_putch
    _LCDWriteNum->___awdiv
    _LCDWriteMsgROM->_LCDWriteChar
    _task2->___lwdiv
    _LCDSetup->_LCDWriteCMD

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_task3
    _task4->_LCDWriteNum
    _task3->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5365
                           _LCDSetup
                              _setup
                              _task1
                              _task2
                              _task3
                              _task4
 ---------------------------------------------------------------------------------
 (1) _task4                                                2     2      0    1704
                                             12 BANK0      2     2      0
                          _LCDGotoXY
                        _LCDWriteCMD
                        _LCDWriteNum
 ---------------------------------------------------------------------------------
 (1) _task3                                                2     2      0    3345
                                             23 BANK0      2     2      0
                          _LCDGotoXY
                     _LCDWriteMsgROM
                        _LCDWriteNum
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               6     3      3    1621
                                             19 BANK0      4     1      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    1537
                                              9 COMMON     1     1      0
                                             16 BANK0      3     0      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    1337
                                              5 BANK0     11     8      3
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     358
                                              3 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      29
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCDWriteNum                                         12     9      3    1512
                                              0 BANK0     12     9      3
                       _LCDWriteChar
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     169
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     308
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteMsgROM                                       1     0      1     107
                                              4 COMMON     1     0      1
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         2     2      0      58
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            4     3      1     105
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _task2                                                4     4      0     206
                                              0 BANK0      4     4      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     166
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _task1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDSetup                                             3     3      0     110
                                              5 COMMON     3     3      0
                        _LCDWriteCMD
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCMD                                          3     3      0      87
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDSetup
     _LCDWriteCMD
   _setup
   _task1
   _task2
     ___lwdiv
   _task3
     _LCDGotoXY
     _LCDWriteMsgROM
       _LCDWriteChar
     _LCDWriteNum
       _LCDWriteChar
       ___awdiv
       ___lwmod
     _printf
       _vfprintf
         _vfpfcnvrt
           ___lwdiv
           ___lwmod
           _fputc
             _putch
   _task4
     _LCDGotoXY
     _LCDWriteCMD
     _LCDWriteNum

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     25      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       1      7.1%
DATA                 0      0      89      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sun Jul 27 23:09:56 2025

                      pc 0002                       l83 06A9                       l96 06F1  
                     l89 0626             ___awdiv@sign 0077                       fsr 0004  
                    l104 049A                      l200 04F8                      l120 03DE  
                    l201 0537                      l132 0136                      l109 04EC  
                    l213 070D                      l150 01D6                      l160 0737  
                    l137 0153                      l154 0208                      l219 035C  
                    l173 0686                      l157 072F                      l192 05B7  
                    l187 0134                      l196 04EF                      l198 04F2  
                    l199 04F5                      l458 0441                      l812 06D4  
                    l805 02C8                      l824 0498                      l585 0579  
                    l595 05EF                      l768 072D                      l797 0249  
                    u800 0540                      u801 053F                      u820 0550  
                    u900 05D8                      u821 054F                      u901 05D7  
                    u815 0544                      u840 0561                      u920 05EB  
                    u841 0560                      u921 05EA                      u905 05D4  
                    u835 0551                      u915 05DF                      u860 0575  
                    u861 0574                      u845 055D                      u870 05BE  
                    u790 0735                      u855 0569                      u871 05BD  
                    u791 0734                      u890 05CE                      u891 05CD  
                    u885 05C2                      _isr 070E                      fsr0 0004  
                    indf 0000             ?_LCDWriteCMD 0070             ?_LCDWriteNum 0056  
                   l1120 05F4                     l2000 0065                     l1130 05FF  
                   l1122 05F7                     l2010 00AA                     l2002 006E  
                   l1140 060B                     l1132 0602                     l1124 05F8  
                   l2020 010D                     l2012 00D1                     l2004 0074  
                   l2100 014B                     l1150 0623                     l1142 0616  
                   l1134 0603                     l1126 05FB                     l1118 05F0  
                   l2030 0124                     l2022 0112                     l2014 00DA  
                   l2006 009B                     l2110 016B                     l2102 0150  
                   l1152 0624                     l1144 0617                     l1136 0604  
                   l1128 05FC                     l2040 049E                     l2032 012A  
                   l2024 0114                     l2016 00E0                     l2008 00A4  
                   l1400 072F                     l2112 016D                     l2104 0157  
                   l1154 0625                     l1146 061A                     l1138 0607  
                   l1410 0543                     l2050 04CA                     l2042 04A9  
                   l2034 012E                     l2026 0119                     l2018 0107  
                   l1402 0735                     l2130 019A                     l2122 017C  
                   l2114 0174                     l2106 0166                     l1148 061F  
                   l1420 0567                     l1412 054A                     l1404 0538  
                   l2052 04CC                     l2044 04B3                     l2036 0499  
                   l2028 011D                     l2060 035D                     l2132 01A0  
                   l2124 0183                     l2116 017A                     l2108 0168  
                   l1422 0568                     l1414 054C                     l1406 053A  
                   l2054 04DD                     l2038 049B                     l1510 065D  
                   l1430 05B8                     l2070 0383                     l2062 0365  
                   l2142 01B9                     l2134 01A2                     l2126 0186  
                   l1424 056F                     l1416 0550                     l1408 0540  
                   l2048 04BB                     l1600 0522                     l1520 067A  
                   l1512 066F                     l1440 05CE                     l1432 05BE  
                   l2080 03AE                     l2072 0393                     l2064 0367  
                   l2160 01ED                     l2128 0198                     l2136 01B1  
                   l2144 01C0                     l1418 0561                     l1426 0575  
                   l2058 04DF                     l1602 052A                     l1522 067B  
                   l1514 0670                     l1610 06F2                     l1530 03E4  
                   l1442 05D8                     l1434 05C1                     l2090 03C7  
                   l2082 03B5                     l2074 039B                     l2066 0375  
                   l2162 01F3                     l2154 01DA                     l2146 01C6  
                   l2138 01B6                     l2170 01F8                     l1700 02FC  
                   l1604 052B                     l1524 0682                     l1516 0671  
                   l1508 065A                     l1612 06F3                     l1540 03F6  
                   l1532 03E9                     l1444 05DE                     l1436 05C8  
                   l2092 03CE                     l2076 03A3                     l2068 037C  
                   l2084 03B8                     l2164 01F4                     l2156 01E9  
                   l2180 069B                     l2172 0687                     l1710 0315  
                   l1702 0305                     l1606 052C                     l1518 0679  
                   l1614 06FF                     l1550 040A                     l1542 03F8  
                   l1534 03EB                     l1526 03DF                     l1446 05E5  
                   l1438 05CA                     l2086 03BE                     l2078 03AA  
                   l2158 01EB                     l2094 0135                     l2182 06A0  
                   l2174 0691                     l1720 0325                     l1712 0316  
                   l1704 030E                     l1608 0533                     l1616 0701  
                   l1560 042D                     l1552 040E                     l1544 03FE  
                   l1536 03EF                     l1528 03E0                     l1448 05EB  
                   l2088 03C0                     l2096 013A                     l2184 06A4  
                   l2176 0695                     l1730 0334                     l1722 0327  
                   l1714 0319                     l1706 0312                     l1554 041F  
                   l1546 0401                     l1562 0433                     l1538 03F4  
                   l2098 0149                     l2178 0696                     l1740 033E  
                   l1732 0335                     l1724 0328                     l1716 031D  
                   l1708 0314                     l1564 0438                     l1556 0425  
                   l1548 0408                     l1670 0592                     l1662 057B  
                   l1742 0344                     l1734 0336                     l1726 0329  
                   l1718 0321                     l1750 06D5                     l1590 04FB  
                   l1566 043D                     l1558 0426                     l1680 05A9  
                   l1672 059A                     l1664 057E                     l1744 034A  
                   l1736 0337                     l1728 032C                     l1760 06EF  
                   l1752 06DD                     l1592 0509                     l1920 0442  
                   l1682 05AE                     l1674 059B                     l1666 0590  
                   l1746 0350                     l1738 033A                     l1690 02E4  
                   l1754 06E4                     l1594 050B                     l1586 04EE  
                   l1930 0481                     l1922 0447                     l1676 059C  
                   l1668 0591                     l1748 0356                     l1692 02EE  
                   l1684 02C9                     l1756 06E5                     l1596 0520  
                   l1924 044C                     l1940 0221                     l1678 05A3  
                   l1694 02EF                     l1686 02D4                     l1758 06EE  
                   l1598 0521                     l1926 0453                     l1950 0261  
                   l1942 0225                     l1934 0209                     l1696 02F0  
                   l1688 02DD                     l1928 0464                     l1960 0298  
                   l1952 0276                     l1944 0229                     l1936 0219  
                   l1698 02F3                     l1954 027C                     l1946 0235  
                   l1938 021D                     l1970 02B1                     l1956 0282  
                   l1948 024B                     l1964 029F                     l1980 06C4  
                   l1958 0294                     l1966 02AA                     l1982 06D0  
                   l1992 0024                     l1976 06B2                     l1994 002D  
                   l1978 06B7                     l1986 071F                     l1996 0038  
                   l1988 0723                     l1998 003E                     ?_isr 0070  
                   STR_1 0647                     STR_2 064F                     STR_3 063A  
                   STR_4 062D                     STR_5 0654                     u1110 0433  
                   u1030 03E4                     u1111 0432                     u1031 03E3  
                   u1120 0438                     u1040 03EF                     u1025 0668  
                   u1121 0437                     u1105 0427                     u1041 03EE  
                   u1050 03FE                     u1051 03FD                     u1300 05A9  
                   u1301 05A8                     u1310 02E4                     u1150 070D  
                   u1070 040E                     u1311 02E3                     u2007 0684  
                   u1151 070C                     u1071 040D                     u1320 06E4  
                   u1321 06E3                     u2017 0535                     u1145 0519  
                   u1065 0402                     u1330 06EE                     u1090 041F  
                   u2107 05AB                     u2027 02D8                     u1331 06ED  
                   u1091 041E                     u2117 05B2                     u2037 02F7  
                   u1085 040F                     u2047 0300                     u1095 041B  
                   u1600 0219                     u2057 0309                     u1601 0218  
                   u1610 0235                     u2067 031B                     u1611 0234  
                   u1700 0074                     u1620 027C                     u2077 031F  
                   u1701 0073                     u1621 027B                     u1710 00A4  
                   u1630 0281                     u1295 0589                     u2087 032E  
                   u1711 00A3                     u1631 0280                     u1800 04CA  
                   u1720 00AA                     u1560 0447                     u1640 029E  
                   u2097 033C                     u1801 04C9                     u1721 00A9  
                   u1561 0446                     u1641 029D                     u1730 00DA  
                   u1570 044C                     u1650 06D0                     u1810 0365  
                   u1731 00D9                     u1571 044B                     u1651 06CF  
                   u1811 0364                     u1740 00E0                     u1660 0028  
                   u1580 0464                     u1820 03A3                     u1900 0192  
                   u1741 00DF                     u1581 0463                     u1821 03A2  
                   u1901 0190                     u1750 010D                     u1670 0038  
                   u1590 0481                     u1830 03BE                     u1910 0198  
                   u1902 0193                     u1751 010C                     u1671 0037  
                   u1591 0480                     u1831 03BD                     u1911 0197  
                   u1760 0112                     u1680 003E                     u1920 01A0  
                   u1840 013A                     u1761 0111                     u1681 003D  
                   u1921 019F                     u1841 0139                     u1770 0119  
                   u1690 006E                     u1930 01B6                     u1850 0149  
                   u1771 0118                     u1691 006D                     u1595 047D  
                   u1931 01B5                     u1851 0148                     u1780 0134  
                   u1940 01C6                     u1860 0157                     u1781 0133  
                   u1941 01C5                     u1861 0156                     u1950 01D5  
                   u1870 0166                     u1951 01D4                     u1871 0165  
                   u1960 01DA                     u1880 0183                     u1961 01D9  
                   u1881 0182                     u1970 01E9                     u1890 018B  
                   u1795 04B4                     u1971 01E8                     u1891 0189  
                   u1892 018C                     u1980 0695                     u1981 0694  
                   u1990 06A4                     u1991 06A3                     i1l76 0718  
                   _TMR0 0001                     _dbuf 0020                     _main 0687  
                   _prec 0047                     btemp 007E                     start 000C  
                  ??_isr 0070            ?_LCDWriteChar 0070         __end_of_LCDSetup 035D  
                  ?_main 0070          __end_of___awdiv 0442                    _ANSEL 0188  
        ___awdiv@divisor 0072          __end_of___lwdiv 057A          __end_of___lwmod 05F0  
        ___awdiv@counter 0076             LCDGotoXY@col 0074             vfpfcnvrt@fmt 005C  
           LCDGotoXY@row 0072                    _SPBRG 0099                    _PORTC 0007  
                  _TRISC 0087                    u75_20 0712                    u75_21 0711  
                  _TXREG 0019                    _nRBPU 040F                    _flags 004F  
                  _fputc 0442                    _task1 06D5                    _task2 0499  
                  _task3 035D                    _task4 0135                    _setup 05F0  
                  _width 0045                    _putch 072E           __pbitbssCOMMON 03D0  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 06B2           ??_LCDWriteChar 0072  
                 ??_main 007A        __end_of_LCDGotoXY 0538                   ?_fputc 0073  
                 _ADRESH 001E                   _ADRESL 009E                   ?_task1 0070  
                 ?_task2 0070                   ?_task3 0070                   ?_task4 0070  
       ___awdiv@dividend 0074                   ?_setup 0070                   ?_putch 0070  
                 _ANSELH 0189                   i1l1370 070E                   i1l1372 0712  
                 i1l1374 0713                   i1l1376 0717           _LCDWriteMsgROM 06F2  
           vfprintf@cfmt 0079                   _adcres 0055                   _adcset 006F  
              ??___awdiv 0076                ??___lwdiv 0076                ??___lwmod 0076  
       ___awdiv@quotient 0078                   _tickms 03D1                   _printf 071F  
                 fputc@c 0073                   saved_w 007E             LCDWriteNum@i 0061  
       __end_of_vfprintf 06D5   __end_of_LCDWriteMsgROM 070E  __end_of__initialization 0020  
              ?_LCDSetup 0070           __pcstackCOMMON 0070                LCDSetup@n 0077  
           __pidataBANK0 0740            __end_of_fputc 0499            __end_of_task1 06F2  
          __end_of_task2 04ED            __end_of_task3 03DF            __end_of_task4 0209  
          __end_of_setup 0627            __end_of_putch 0738           _OPTION_REGbits 0081  
                ??_fputc 0056                  ??_task1 0072                  ??_task2 0056  
                ??_task3 006D                  ??_task4 0062                  ??_setup 0072  
                ??_putch 0072     __end_of_LCDWriteChar 0687               __pbssBANK0 0020  
        ?_LCDWriteMsgROM 0074               ??_LCDSetup 0075               __pmaintext 0687  
             __pintentry 0004                  ?_printf 0069        LCDWriteMsgROM@str 0074  
             __stringtab 0627                  ___awdiv 03DF                  ___lwdiv 0538  
                ___lwmod 05B8                ?_vfprintf 0066                _ANSELbits 0188  
                __ptext1 0135                  __ptext2 035D                  __ptext3 071F  
                __ptext4 06B2                  __ptext5 0209                  __ptext6 0442  
                __ptext7 072E                  __ptext8 0024                  __ptext9 05B8  
              _LCDGotoXY 04ED                  _setmode 03D0                  clrloop0 0739  
   end_of_initialization 0020                  fputc@fp 0075        __end_of_vfpfcnvrt 02C9  
              _RCSTAbits 0018         vfpfcnvrt@convarg 0060               ??_vfprintf 0079  
              _PORTBbits 0006                _PORTCbits 0007                _PORTEbits 0009  
              _TRISBbits 0086                _TRISCbits 0087                _TRISEbits 0089  
             ?_LCDGotoXY 0072                _TXSTAbits 0098              vfpfcnvrt@ap 005D  
            vfpfcnvrt@cp 0064              vfpfcnvrt@fp 005B             _LCDWriteChar 0659  
           task3@adcres0 0053             task3@adcset0 0052           __end_of_printf 072E  
    start_initialization 000F         ??_LCDWriteMsgROM 0075            ??_LCDWriteCMD 0072  
            __end_of_isr 071F            ??_LCDWriteNum 0059              vfprintf@fmt 0067  
            __pdataBANK0 006F                 ??_printf 007A              __pbssCOMMON 007B  
       LCDWriteChar@data 0073                ___latbits 0002            __pcstackBANK0 0056  
            ??_LCDGotoXY 0073               task4@ckpin 0050               task2@state 0054  
             task4@state 0051      __end_of_LCDWriteCMD 05B8      __end_of_LCDWriteNum 0135  
       ___lwdiv@dividend 0074                 ?___awdiv 0072                 ?___lwdiv 0072  
               ?___lwmod 0072         LCDWriteNum@F1440 0040                __pstrings 0627  
        LCDGotoXY@DDaddr 0075         ___lwdiv@quotient 0076        interrupt_function 0004  
               _LCDSetup 02C9                clear_ram0 0738                 _PIR1bits 000C  
              _vfpfcnvrt 0209               _ADCON0bits 001F              __stringbase 062C  
            _LCDWriteCMD 057A               vfpfcnvrt@c 0065              _LCDWriteNum 0024  
             vfprintf@ap 0068               vfprintf@fp 0066               ?_vfpfcnvrt 005B  
     __end_of__stringtab 062D          ___lwdiv@divisor 0072          ___lwdiv@counter 0078  
               __ptext10 03DF                 __ptext11 06F2                 __ptext20 070E  
               __ptext12 0659                 __ptext13 04ED                 __ptext14 0499  
               __ptext15 0538                 __ptext16 06D5                 __ptext17 05F0  
               __ptext18 02C9                 __ptext19 057A          LCDWriteNum@digs 005B  
        LCDWriteNum@padn 0058                 _vfprintf 06B2                printf@fmt 0069  
         LCDWriteCMD@cmd 0074                putch@byte 0072               _INTCONbits 000B  
               task1@cnt 004D                 task2@cnt 004B                 task4@cnt 0049  
               task2@res 0058                 task4@val 007B                 intlevel1 0000  
       ___lwmod@dividend 0074           LCDWriteNum@res 0060           LCDWriteNum@num 0056  
              stringcode 0627               _OSCCONbits 008F                 printf@ap 006C  
            ??_vfpfcnvrt 005E          ___lwmod@divisor 0072          ___lwmod@counter 0076  
               stringdir 0627                 stringtab 0627  
